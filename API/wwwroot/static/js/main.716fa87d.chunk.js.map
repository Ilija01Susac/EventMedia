{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/navBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/homePage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgeteDropzone.tsx","app/common/imageUpload/PhotoWidgeteCroper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrolltoTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","responseBody","response","interceptors","request","use","config","token","store","commonStore","headers","Authorization","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","url","get","then","body","post","delete","agent","Activities","list","params","details","id","create","activity","update","put","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","profile","loadingProfile","uploading","loadingOnDelete","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","margineBottom","secondary","clearing","floated","groupedActivites","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","marginBottom","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","ribbon","floted","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgeteDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgeteCroper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","basin","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"+YAOaA,EAIT,WAAYC,EAAUC,GAAwB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA0C,IAA9BC,EAA6B,uDAAhB,EAAGC,EAAa,uDAAF,EAAE,yBAHzCD,gBAGyC,OAFzCC,cAEyC,EACrCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCRxBC,IAAMC,SAASC,QAAUC,OAEzB,IAAMC,EAAe,SAAIC,GAAJ,OAAmCA,EAASX,MAEjEM,IAAMM,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXT,IAAMM,aAAaD,SAASG,IAA5B,+BAAAO,EAAA,MAAgC,WAAMV,GAAN,eAAAU,EAAA,iFAEtBpB,EAAaU,EAASQ,QAAT,YAFS,uBAIxBR,EAASX,KAAO,IAAID,EAAgBY,EAASX,KAAMsB,KAAKC,MAAMtB,IAJtC,kBAKjBU,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACa,GACA,MAAiCA,EAAMb,SAA/BX,EAAR,EAAQA,KAAMyB,EAAd,EAAcA,OAAQV,EAAtB,EAAsBA,OACtB,OAAQU,GACJ,KAAK,IAQD,GAPoB,kBAATzB,GACP0B,IAAMF,MAAMxB,GAEM,QAAlBe,EAAOY,QAAoB3B,EAAK4B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAGb/B,EAAK4B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAOjC,EAAK4B,OACf5B,EAAK4B,OAAOK,IACZD,EAAiBD,KAAK/B,EAAK4B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBR,IAAMF,MAAMxB,GAEhB,MACJ,KAAK,IACD0B,IAAMF,MAAM,gBACZ,MACJ,KAAK,IACDM,GAAQC,KAAK,cACb,MACJ,KAAK,IACDd,EAAMC,YAAYiB,eAAenC,GACjC8B,GAAQC,KAAK,iBAOrB,OAAOK,QAAQC,OAAOb,MAG1B,IAAMX,EACG,SAAIyB,GAAJ,OAAoBhC,IAAMiC,IAAOD,GAAKE,KAAK9B,IAD9CG,EAEI,SAAIyB,EAAaG,GAAjB,OAA8BnC,IAAMoC,KAAQJ,EAAKG,GAAMD,KAAK9B,IAFhEG,EAIM,SAAIyB,GAAJ,OAAoBhC,IAAMqC,OAAUL,GAAKE,KAAK9B,IAwC3CkC,EAND,CACVC,WAhCe,CACfC,KAAM,SAACC,GAAD,OAA6BzC,IAAMiC,IAAiC,cAAe,CAAEQ,WAAUP,KAAK9B,IAC1GsC,QAAS,SAACC,GAAD,OAAgBpC,EAAA,sBAAqCoC,KAC9DC,OAAQ,SAACC,GAAD,OAAkC7C,IAAMoC,KAAW,cAAeS,IAC1EC,OAAQ,SAACD,GAAD,OAAkC7C,IAAM+C,IAAN,sBAA+BF,EAASF,IAAME,IACxFR,OAAQ,SAACM,GAAD,OAAgB3C,IAAMqC,OAAN,sBAAkCM,KAC1DK,OAAQ,SAACL,GAAD,OAAgBpC,EAAA,sBAAkCoC,EAAlC,WAA+C,MA2BvEM,QAxBY,CACZC,QAAS,kBAAM3C,EAAkB,aACjC4C,MAAO,SAACC,GAAD,OAA0B7C,EAAmB,iBAAkB6C,IACtEC,SAAU,SAACD,GAAD,OAA0B7C,EAAmB,oBAAqB6C,KAsB5EE,SAnBa,CACbrB,IAAK,SAACsB,GAAD,OAAsBhD,EAAA,oBAAkCgD,KAC7DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjBzD,IAAMoC,KAAY,SAAUsB,EAAU,CACzC7C,QAAS,CAAE,eAAgB,0BAGnCgD,aAAc,SAAClB,GAAD,OAAgBpC,EAAA,kBAAwBoC,EAAxB,YAAsC,KACpEmB,YAAa,SAACnB,GAAD,OAAgBpC,EAAA,kBAA0BoC,KACvDoB,gBAAiB,SAACR,GAAD,OAAsBhD,EAAA,kBAAwBgD,GAAY,KAC3ES,eAAgB,SAACT,EAAkBU,GAAnB,OAAyC1D,EAAA,kBAAkCgD,EAAlC,sBAAwDU,KACjHC,eAAgB,SAACX,EAAkBU,GAAnB,OAAyC1D,EAAA,oBAAyCgD,EAAzC,iCAA0EU,OC3F1HE,EACT,WAAYC,GAA2B,oBACnCC,OAAOC,OAAO1E,KAAK+C,GAAIyB,IAIlBG,EAST,WAAY1B,GAA+B,yBAR3CF,QAAc6B,EAQ4B,KAP1CC,MAAgB,GAO0B,KAN1CC,SAAkB,GAMwB,KAL1CC,YAAuB,GAKmB,KAJ1CC,KAAoB,KAIsB,KAH1CC,KAAe,GAG2B,KAF1CC,MAAgB,GAGTjC,IACCjD,KAAK+C,GAAKE,EAASF,GACnB/C,KAAK6E,MAAQ5B,EAAS4B,MACtB7E,KAAK8E,SAAW7B,EAAS6B,SACzB9E,KAAK+E,YAAc9B,EAAS8B,YAC5B/E,KAAKgF,KAAO/B,EAAS+B,KACrBhF,KAAKiF,KAAOhC,EAASgC,KACrBjF,KAAKkF,MAAQjC,EAASiC,Q,SC5BrBC,EACT,WAAY3B,GAAY,oBACpBxD,KAAK2D,SAAWH,EAAKG,SACrB3D,KAAKoF,YAAc5B,EAAK4B,YACxBpF,KAAKqF,MAAQ7B,EAAK6B,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,iBAAmB,IAAIC,IAST,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,gBAAiB,EAKH,KAJd7F,WAAgC,KAIlB,KAHd8F,aAAe,IAAI5F,EAGL,KAFdoE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOlE,GACf,cAARA,GAAqB,EAAKsC,UAAU5B,OAAOV,OAGvD,OAAQsC,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU5B,OAAO,aACtB,EAAK4B,UAAUyB,IAAI,YAAaG,KAtC9B,KAuEdG,eAvEc,sBAuEG,4BAAAjF,EAAA,6DACb,EAAKyE,gBAAiB,EADT,kBAGYlD,EAAMC,WAAWC,KAAK,EAAKyD,aAHvC,QAGHC,EAHG,QAIFxG,KAAKqG,SAAQ,SAAAlD,GAChB,EAAKsD,YAAYtD,MAErB,EAAKuD,cAAcF,EAAOvG,YAC1B,EAAK0G,mBAAkB,GARd,kDAUTC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXd,0DAvEH,KAsFdD,cAAgB,SAACzG,GACb,EAAKA,WAAaA,GAvFR,KA0Fd6G,aA1Fc,uCA0FC,WAAO7D,GAAP,eAAA5B,EAAA,2DACP8B,EAAW,EAAK4D,YAAY9D,IADrB,uBAGP,EAAK0C,iBAAmBxC,EAHjB,kBAIAA,GAJA,cAMP,EAAK2C,gBAAiB,EANf,mBAQclD,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKsD,YAAYtD,GACjB6D,aAAY,WACR,EAAKrB,iBAAmBxC,KAE5B,EAAKwD,mBAAkB,GAbpB,kBAcIxD,GAdJ,kCAgBHyD,QAAQC,IAAR,MAhBG,0DA1FD,2DA+GNE,YAAc,SAAC9D,GACnB,OAAO,EAAKwC,iBAAiBlD,IAAIU,IAhHvB,KAmHNwD,YAAc,SAACtD,GACnB,IACU,EADJO,EAAOzC,EAAMgG,UAAUvD,KACzBA,IACAP,EAAS+D,QAAU/D,EAASgE,UAAWC,MACnC,SAAA/F,GAAC,OAAIA,EAAEwC,WAAaH,EAAKG,YAE7BV,EAASkE,OAASlE,EAASmE,eAAiB5D,EAAKG,SACjDV,EAASoE,KAAT,UAAgBpE,EAASgE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE5D,WAAaV,EAASmE,iBAE1EnE,EAAS+B,KAAO,IAAIwC,KAAKvE,EAAS+B,MAClC,EAAKO,iBAAiBO,IAAI7C,EAASF,GAAIE,IA7H7B,KAgIdwD,kBAAoB,SAACgB,GACjB,EAAK7B,eAAiB6B,GAjIZ,KAoIdC,eApIc,uCAoIG,WAAOzE,GAAP,mBAAA9B,EAAA,6DACPqC,EAAOzC,EAAMgG,UAAUvD,KACvBmE,EAAW,IAAIxC,EAAQ3B,GAFhB,kBAKHd,EAAMC,WAAWK,OAAOC,GALrB,QAMH2E,EAAc,IAAIrD,EAAStB,IACrBmE,aAAe5D,EAAMG,SACjCiE,EAAYX,UAAY,CAACU,GACzB,EAAKpB,YAAYqB,GACjBd,aAAY,WACR,EAAKrB,iBAAmBmC,KAXnB,kDAcTlB,QAAQC,IAAR,MAdS,0DApIH,2DAsJdkB,eAtJc,uCAsJG,WAAO5E,GAAP,SAAA9B,EAAA,+EAEHuB,EAAMC,WAAWO,OAAOD,GAFrB,OAGT6D,aAAY,WACR,GAAI7D,EAASF,GAAI,CACb,IAAI+E,EAAe,2BAAQ,EAAKjB,YAAY5D,EAASF,KAAQE,GAC7D,EAAKsC,iBAAiBO,IAAI7C,EAASF,GAAI+E,GACvC,EAAKrC,iBAAmBqC,MAPvB,+CAWTpB,QAAQC,IAAR,MAXS,wDAtJH,2DAqKdoB,eArKc,uCAqKG,WAAOhF,GAAP,SAAA5B,EAAA,sDACb,EAAKwE,SAAU,EACf,IACIjD,EAAMC,WAAWF,OAAOM,GACxB+D,aAAY,WACR,EAAKvB,iBAAiB9C,OAAOM,GAC7B,EAAK4C,SAAU,KAErB,MAAOrE,GACLoF,QAAQC,IAAIrF,GACZwF,aAAY,WACR,EAAKnB,SAAU,KAXV,2CArKH,2DAqLdqC,iBArLc,sBAqLK,4BAAA7G,EAAA,6DACTqC,EAAOzC,EAAMgG,UAAUvD,KAC7B,EAAKmC,SAAU,EAFA,kBAILjD,EAAMC,WAAWS,OAAO,EAAKqC,iBAAkB1C,IAJ1C,OAKX+D,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UACI,EAAKxB,iBAAiBwB,iBAD1B,aACI,EAAiCgB,QAAO,SAAA9G,GAAC,OAAIA,EAAEwC,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACtE,EAAK8B,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIxC,EAAQ3B,GAC7B,YAAKiC,wBAAL,mBAAuBwB,iBAAvB,SAAkCpF,KAAK8F,GACvC,EAAKlC,iBAAkBuB,SAAU,EAErC,EAAKzB,iBAAiBO,IAAI,EAAKL,iBAAkB1C,GAAI,EAAK0C,qBAfnD,gDAkBXiB,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,kBAAM,EAAKnB,SAAU,KApBtB,4EArLL,KA6MduC,qBA7Mc,sBA6MS,sBAAA/G,EAAA,6DACnB,EAAKwE,SAAU,EADI,kBAGTjD,EAAMC,WAAWS,OAAO,EAAKqC,iBAAkB1C,IAHtC,OAIf+D,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,iBAAiBO,IAAI,EAAKL,iBAAkB1C,GAAI,EAAK0C,qBAN/C,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA7MT,KA4NdyC,sBAAwB,WACpB,EAAK3C,sBAAmBb,GA7Nd,KAgOdyD,wBAA0B,SAAC1E,GACvB,EAAK4B,iBAAiBY,SAAQ,SAAAlD,GAC1BA,EAASgE,UAAUd,SAAQ,SAAAwB,GACnBA,EAAShE,WAAaA,IACtBgE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBApO3CE,YAAmBxI,MAEnByI,aACI,kBAAM,EAAKpE,UAAUqE,UACrB,WACI,EAAK7C,aAAe,IAAI5F,EACxB,EAAKsF,iBAAiBoD,QACtB,EAAKvC,oB,6CAkCjB,WACI,IAAMvD,EAAS,IAAI+F,gBAUnB,OATA/F,EAAOmB,OAAO,aAAchE,KAAK6F,aAAa3F,WAAW2I,YACzDhG,EAAOmB,OAAO,WAAYhE,KAAK6F,aAAa1F,SAAS0I,YACrD7I,KAAKqE,UAAU8B,SAAQ,SAACF,EAAOlE,GACf,cAARA,EACAc,EAAOmB,OAAOjC,EAAMkE,EAAe6C,eAEnCjG,EAAOmB,OAAOjC,EAAKkE,MAGpBpD,I,4BAIX,WACI,OAAOkG,MAAMC,KAAKhJ,KAAKuF,iBAAiB0D,UAAUC,MAAK,SAAC/H,EAAGgI,GAAJ,OAAUhI,EAAE6D,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,4BAGjG,WACI,OAAO3E,OAAO4E,QACVrJ,KAAKsJ,iBAAiBC,QAAO,SAACC,EAAYvG,GACtC,IAAM+B,EAAOyE,kBAAOxG,EAAS+B,KAAO,eAEpC,OADAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBAAuBwE,EAAWxE,IAAlC,CAAyC/B,IAAY,CAACA,GAClEuG,IACR,S,cChFME,E,WAYjB,aAAe,IAAD,gCAXdC,QAA0B,KAWZ,KAVdC,gBAAiB,EAUH,KATdC,WAAY,EASE,KARdlE,SAAU,EAQI,KAPdmE,iBAAkB,EAOJ,KANdC,WAAwB,GAMV,KALdC,mBAA6B,EAKf,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAO1G,GAAP,eAAAxC,EAAA,6DACV,EAAKyI,gBAAiB,EADZ,kBAIgBlH,EAAMgB,SAASrB,IAAIsB,GAJnC,OAIAgG,EAJA,OAKN7C,aAAY,WACR,EAAK6C,QAAUA,EACf,EAAKC,gBAAiB,KAPpB,gDAUNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,gBAAiB,KAXlC,yDA3BA,2DA0CdhG,YA1Cc,uCA0CA,WAAOC,GAAP,iBAAA1C,EAAA,6DACV,EAAK0I,WAAY,EADP,kBAGiBnH,EAAMgB,SAASE,YAAYC,GAH5C,OAGApD,EAHA,OAIA6J,EAAQ7J,EAASX,KACvBgH,aAAY,WACW,IAAD,EAAd,EAAK6C,UACL,YAAKA,QAAQY,cAAb,SAAqB1I,KAAKyI,GACtBA,EAAME,QAAUzJ,EAAMgG,UAAUvD,OAChCzC,EAAMgG,UAAU0D,SAASH,EAAMlI,KAC/B,EAAKuH,QAAQtE,MAAQiF,EAAMlI,MAGnC,EAAKyH,WAAY,KAbf,gDAiBNnD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK+C,WAAY,KAlB7B,yDA1CA,2DAgEd5F,aAhEc,uCAgEC,WAAOqG,GAAP,SAAAnJ,EAAA,6DACX,EAAKwE,SAAU,EADJ,kBAGDjD,EAAMgB,SAASO,aAAaqG,EAAMvH,IAHjC,OAIPhC,EAAMgG,UAAU0D,SAASH,EAAMlI,KAC/B0E,aAAY,WACJ,EAAK6C,SAAW,EAAKA,QAAQY,SAC7B,EAAKZ,QAAQY,OAAOjD,MAAK,SAAAoD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKb,QAAQY,OAAOjD,MAAK,SAAAoD,GAAC,OAAIA,EAAE3H,KAAOuH,EAAMvH,MAAKyH,QAAS,EAC3D,EAAKb,QAAQtE,MAAQiF,EAAMlI,IAC3B,EAAKuD,SAAU,MAVhB,gDAcPe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAf1B,yDAhED,2DAmFdzB,YAnFc,uCAmFA,WAAOoG,GAAP,SAAAnJ,EAAA,6DACV,EAAK2I,iBAAkB,EADb,kBAGApH,EAAMgB,SAASQ,YAAYoG,EAAMvH,IAHjC,OAIN+D,aAAY,WACW,IAAD,EAAd,EAAK6C,UACL,EAAKA,QAAQY,OAAb,UAAsB,EAAKZ,QAAQY,cAAnC,aAAsB,EAAqBtC,QAAO,SAAAyC,GAAC,OAAIA,EAAE3H,KAAOuH,EAAMvH,MACtE,EAAK+G,iBAAkB,MAPzB,gDAWNpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,iBAAkB,KAZnC,yDAnFA,2DAmGd3F,gBAnGc,uCAmGI,WAAOR,EAAkB2E,GAAzB,SAAAnH,EAAA,6DACd,EAAKwE,SAAU,EADD,kBAGJjD,EAAMgB,SAASS,gBAAgBR,GAH3B,OAIV5C,EAAM4J,cAActC,wBAAwB1E,GAC5CmD,aAAY,WAAO,IAAD,IACV,EAAK6C,SAAW,EAAKA,QAAQhG,YAAb,UAA0B5C,EAAMgG,UAAUvD,YAA1C,aAA0B,EAAsBG,WAAY,EAAKgG,QAAQhG,WAAaA,IACtG2E,EAAY,EAAKqB,QAAQpB,iBAAmB,EAAKoB,QAAQpB,iBACzD,EAAKoB,QAAQrB,WAAa,EAAKqB,QAAQrB,WAEvC,EAAKqB,SAAW,EAAKA,QAAQhG,YAAb,UAA0B5C,EAAMgG,UAAUvD,YAA1C,aAA0B,EAAsBG,YAChE2E,EAAY,EAAKqB,QAAQiB,iBAAmB,EAAKjB,QAAQiB,kBAE7D,EAAKb,WAAW5D,SAAQ,SAAAwD,GAChBA,EAAQhG,WAAaA,IACrBgG,EAAQrB,UAAYqB,EAAQpB,iBAAmBoB,EAAQpB,iBACvDoB,EAAQrB,WAAaqB,EAAQrB,cAGrC,EAAK3C,SAAU,KAnBT,gDAsBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAvBvB,yDAnGJ,6DA8HdkF,eA9Hc,uCA8HG,WAAOxG,GAAP,eAAAlD,EAAA,6DACb,EAAK6I,mBAAoB,EADZ,kBAGgBtH,EAAMgB,SAASU,eAAe,EAAKuF,QAAShG,SAAUU,GAHtE,OAGH0F,EAHG,OAITjD,aAAY,WACR,EAAKiD,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTtD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKkD,mBAAoB,KAVlC,yDA9HH,2DA6Idc,mBA7Ic,uCA6IO,WAAOnH,EAAkBU,GAAzB,eAAAlD,EAAA,6DACjB,EAAKgJ,mBAAoB,EADR,kBAGYzH,EAAMgB,SAASY,eAAeX,EAAUU,GAHpD,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKoD,eAAiBV,EACtB,EAAKW,mBAAoB,KANhB,gDASbzD,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKqD,mBAAoB,KAXhB,yDA7IP,wDACV3B,YAAmBxI,MAEnByI,aACI,kBAAM,EAAKwB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM5F,EAA0B,IAAd4F,EAAkB,YAAc,YAClD,EAAKY,eAAexG,QAEpB,EAAK0F,WAAa,M,+CAUlC,WACI,SAAIhJ,EAAMgG,UAAUvD,OAAQxD,KAAK2J,UACtB5I,EAAMgG,UAAUvD,KAAKG,WAAa3D,KAAK2J,QAAQhG,a,KCjC7CoH,E,WAGjB,aAAe,IAAD,gCAFdvH,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAOyH,GAAP,eAAA7J,EAAA,+EAEmBuB,EAAMW,QAAQE,MAAMyH,GAFvC,OAEMxH,EAFN,OAGAzC,EAAMC,YAAYiK,SAASzH,EAAK1C,OAChCgG,aAAY,kBAAM,EAAKtD,KAAOA,KAC9B5B,GAAQC,KAAK,eACbd,EAAMmK,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACLrK,EAAMC,YAAYiK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAK/H,KAAO,KACZ5B,GAAQC,KAAK,MAxBH,KA2Bd2J,QA3Bc,sBA2BJ,4BAAArK,EAAA,+EAEiBuB,EAAMW,QAAQC,UAF/B,OAEIE,EAFJ,OAGFsD,aAAY,kBAAM,EAAKtD,KAAOA,KAH5B,gDAKFkD,QAAQC,IAAR,MALE,yDA3BI,KAoCdlD,SApCc,uCAoCH,WAAOuH,GAAP,eAAA7J,EAAA,+EAEgBuB,EAAMW,QAAQI,SAASuH,GAFvC,OAEGxH,EAFH,OAGHzC,EAAMC,YAAYiK,SAASzH,EAAK1C,OAChCgG,aAAY,kBAAM,EAAKtD,KAAOA,KAC9B5B,GAAQC,KAAK,eACbd,EAAMmK,WAAWC,aANd,uHApCG,2DAgDdV,SAAW,SAACpF,GACL,EAAK7B,OAAM,EAAKA,KAAK6B,MAAQA,IAhDhCmD,YAAmBxI,M,4CAGvB,WACI,QAASA,KAAKwD,S,KCGTzC,EAAe,CACxB4J,cAAe,IAAIrF,EACnBtE,YAAa,ICXb,aAAc,IAAD,gCAJbM,MAA4B,KAIf,KAHbR,MAAwBuK,OAAOC,aAAaG,QAAQ,OAGvC,KAFbC,WAAY,EAEC,KAebzJ,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBJ,KAmBb2J,SAAW,SAACnK,GACR,EAAKA,MAAQA,GApBJ,KAuBb6K,aAAe,WACX,EAAKD,WAAY,GAvBjBlD,YAAmBxI,MAEnByI,aACI,kBAAM,EAAK3H,SACX,SAAAA,GACOA,EACCuK,OAAOC,aAAaM,QAAQ,MAAO9K,GAEnCuK,OAAOC,aAAaC,WAAW,WDG/CxE,UAAY,IAAIgE,EAChBG,WAAa,IEPb,aAAc,IAAD,gCALbW,MAAgB,CACZC,MAAM,EACNvJ,KAAM,MAGG,KAIbwJ,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMtJ,KAAOyJ,GANT,KASbb,WAAa,WACT,EAAKU,MAAMC,MAAO,EAClB,EAAKD,MAAMtJ,KAAO,MAVlBiG,YAAmBxI,OFOvBiM,aAAe,IAAIvC,EACnBwC,aAAe,IGdf,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GACfvL,EAAM4J,cAAclF,mBACpB,EAAK2G,eAAgB,IAAIG,KACpBC,QAASjM,oBAAiD+L,EAAY,CACnEG,mBAAoB,kCAAM1L,EAAMgG,UAAUvD,YAAtB,aAAM,EAAsB1C,SAEnD4L,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEL,EAAKV,cAAcW,QAAQC,OAAM,SAAA1L,GAAK,OAAIoF,QAAQC,IAAI,kCAAoCrF,MAC1F,EAAK8K,cAAca,GAAG,gBAAgB,SAACd,GACnCrF,aAAY,WACRqF,EAAShG,SAAQ,SAAA+G,GACbA,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,UAAY,QAErD,EAAKhB,SAAWA,QAIxB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACrCpG,aAAY,WACRoG,EAAQC,UAAY,IAAI3F,KAAK0F,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA3BxB,KAgCdG,kBAAoB,WAAO,IAAD,EACtB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA1L,GAAK,OAAIoF,QAAQC,IAAI,UAAYrF,OAjCxD,KAoCdiM,cAAgB,WACZ,EAAKpB,SAAW,GAChB,EAAKkB,qBAtCK,KAyCdG,WAzCc,uCAyCD,WAAOvE,GAAP,iBAAA9H,EAAA,6DACT8H,EAAOqD,WAAP,UAAoBvL,EAAM4J,cAAclF,wBAAxC,aAAoB,EAAsC1C,GADjD,4BAGC,EAAKqJ,qBAHN,aAGC,EAAoBqB,OAAO,cAAexE,GAH3C,sDAKLvC,QAAQC,IAAR,MALK,wDAzCC,sDACV6B,YAAmBxI,QHgBd0N,EAAeC,wBAAc5M,GAEnC,SAAS6M,IACZ,OAAOC,qBAAWH,G,WItBPI,eAAS,WACpB,MAAwCF,IAAhC7G,UAAavD,EAArB,EAAqBA,KAAM4H,EAA3B,EAA2BA,OAE3B,OACI,cAAC2C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAApC,UACI,qBAAKC,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADjE,gBAIA,cAACZ,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcM,KAAK,eAC9C,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUM,KAAK,WAC1C,cAACb,EAAA,EAAKI,KAAN,UACI,cAACU,EAAA,EAAD,CAAQT,GAAIC,IAASC,GAAG,kBAAkBQ,UAAQ,EAAC9C,QAAQ,sBAE/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWY,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJhL,QAAI,IAAJA,OAAA,EAAAA,EAAM6B,QAAS,mBAAoB4J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE7L,QAAF,IAAEA,OAAF,EAAEA,EAAM4B,YAA1C,SACI,eAAC+J,EAAA,EAASpB,KAAV,WACI,cAACoB,EAAA,EAAShB,KAAV,CAAeC,GAAIkB,IAAMhB,GAAE,2BAAe9K,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UAAY0L,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAAShB,KAAV,CAAeqB,QAASpE,EAAQiE,KAAK,SAASE,KAAK,0B,8DCrBhEzB,eAAS,WACpB,MAAmDF,IAA5CjD,cAAgBtG,EAAvB,EAAuBA,UAAW2B,EAAlC,EAAkCA,aAClC,OACI,qCACI,eAAC+H,EAAA,EAAD,CAAM0B,UAAQ,EAACC,KAAK,QAAQhB,MAAO,CAAEiB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAO/D,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,gBACRgE,OAAQ3L,EAAU4L,IAAI,OACtBT,QAAS,kBAAMxJ,EAAa,MAAO,WAEvC,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRgE,OAAQ3L,EAAU4L,IAAI,WACtBT,QAAS,kBAAMxJ,EAAa,UAAW,WAE3C,cAAC+H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRgE,OAAQ3L,EAAU4L,IAAI,UACtBT,QAAS,kBAAMxJ,EAAa,SAAU,cAG9C,cAAC6J,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAAClL,GAAD,OAAegB,EAAa,YAAahB,IACnDiB,MAAO5B,EAAUhC,IAAI,cAAgB,IAAImF,a,6ECrB1CsG,gBAAS,YAA2C,IAAD,EAAlBnE,EAAkB,EAAlBA,QAC5C,EAAkCiE,IAA3B3B,EAAP,EAAOA,aAAclF,EAArB,EAAqBA,UACd5C,EAA4B8H,EAA5B9H,gBAAiBwB,EAAWsG,EAAXtG,QAExB,IAAG,UAAAoB,EAAUvD,YAAV,eAAgBG,YAAagG,EAAQhG,SAAU,OAAO,KAOzD,OACI,eAACwM,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC5B,MAAO,CAAEiB,MAAO,QAAxC,SACI,cAACd,EAAA,EAAD,CACA0B,OAAK,EACLR,MAAM,OACN/D,QAASrC,EAAQrB,UAAY,YAAc,oBAE/C,cAAC6H,GAAA,EAAOE,QAAR,CAAgBG,QAAM,EAAC9B,MAAO,CAAEiB,MAAO,QAAvC,SACI,cAACd,EAAA,EAAD,CACA0B,OAAK,EACLE,OAAK,EACLV,MAAOpG,EAAQrB,UAAY,MAAQ,QACnC0D,QAASrC,EAAQrB,UAAY,WAAa,SAC1C3C,QAASA,EACT6J,QAAS,SAACkB,GAAD,OApBrB,SAAsBA,EAAmB/M,GACrC+M,EAAEC,iBACFhH,EAAQrB,UAAYnE,EAAgBR,GAAU,GAASQ,EAAgBR,GAAS,GAkBzDiN,CAAaF,EAAE/G,EAAQhG,qBCzBvCmK,gBAAS,YAA0C,IAAnBnE,EAAkB,EAAlBA,QAC3C,OACI,eAACkH,GAAA,EAAD,CAAMzC,GAAIkB,IAAMhB,GAAE,oBAAe3E,EAAQhG,UAAzC,UACI,cAACqL,EAAA,EAAD,CAAOR,IAAK7E,EAAQtE,OAAS,qBAC7B,eAACwL,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,UACKlG,EAAQvE,cAEb,cAACyL,GAAA,EAAKC,YAAN,4BAEJ,eAACD,GAAA,EAAKR,QAAN,CAAcU,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMpC,KAAK,SACVjF,EAAQpB,eAFb,gBAIA,cAAC,GAAD,CAAcoB,QAASA,UCdpBmE,gBAAS,YAAyD,IAArB7G,EAAoB,EAApBA,UAClDgK,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKpK,EAAUqK,KAAI,SAAA3J,GAAQ,OACnB,cAAC4J,GAAA,EAAD,CAAOC,WAAS,EACZC,QACI,cAACL,GAAA,EAAKjD,KAAN,CAAmCC,GAAIkB,IAAMhB,GAAE,oBAAe3G,EAAShE,UAAvE,SACI,cAACqL,EAAA,EAAD,CACAU,KAAK,OACLgC,UAAQ,EACRlD,IAAK7G,EAAStC,OAAS,mBACvBsM,UAAQ,EACRjD,MAAO/G,EAASW,UAAY2I,EAAS,QANzBtJ,EAAShE,UAFjC,SAYI,cAAC4N,GAAA,EAAMlB,QAAP,UACI,cAAC,GAAD,CAAa1G,QAAShC,OAbRA,EAAShE,kBCThC,SAASiO,GAAT,GAAgD,IAAD,IAAnB3O,EAAmB,EAAnBA,SACvC,OACI,eAAC4O,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK5O,EAASkF,aACN,cAAC4J,EAAA,EAAD,CAAOjC,SAAS,MAAMC,MAAM,MAAM/D,QAAQ,WAAW0C,MAAO,CAAEsD,UAAW,YAE7E,cAAC7D,GAAA,EAAK2D,MAAN,UACI,eAAC3D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYN,MAAO,CAAEuD,cAAe,GAAKvC,KAAK,OAAOgC,UAAQ,EAAClD,KAAK,UAAAvL,EAASoE,YAAT,eAAehC,QAAS,qBAC3F,eAAC8I,GAAA,EAAKkC,QAAN,WACI,cAAClC,GAAA,EAAK0B,OAAN,CAAazB,GAAIkB,IAAMhB,GAAE,sBAAiBrL,EAASF,IAAnD,SACKE,EAAS4B,QAEd,eAACsJ,GAAA,EAAK2C,YAAN,wBAA4B,cAAC,IAAD,CAAMxC,GAAE,oBAAerL,EAASmE,cAAhC,mBAAiDnE,EAASoE,YAA1D,aAAiD,EAAejC,cAA5F,QACCnC,EAASkE,QACN,cAACgH,GAAA,EAAK2C,YAAN,UACI,cAACiB,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,SAAnB,8CAKP9M,EAAS+D,UAAY/D,EAASkE,QAC3B,cAACgH,GAAA,EAAK2C,YAAN,UACI,cAACiB,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,QAAnB,0DASxB,cAAC8B,EAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMpC,KAAK,UADf,IAC2BnF,kBAAOxG,EAAS+B,KAAO,uBAC9C,cAACgM,GAAA,EAAD,CAAMpC,KAAK,WAFf,IAE4B3L,EAASiC,WAGzC,cAAC2M,EAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BjL,UAAWhE,EAASgE,cAElD,eAAC4K,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAOlP,EAAS8B,cAChB,cAAC8J,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAE,sBAAiBrL,EAASF,IAC1CgN,MAAM,OAAOqC,QAAQ,QAAQpG,QAAQ,eClD1C8B,oBAAS,WACpB,IACQuE,EADkBzE,IAAlBjD,cACA0H,iBAER,OACI,mCACKA,EAAiBf,KAAI,mCAAEgB,EAAF,KAAS9I,EAAT,YAClB,eAAC,WAAD,WACI,cAACqG,EAAA,EAAD,CAAQ0C,KAAG,EAACxC,MAAM,OAAlB,SACKuC,IAEJ9I,EAAW8H,KAAI,SAAArO,GAAQ,OACpB,cAAC2O,GAAD,CAAoC3O,SAAUA,GAAvBA,EAASF,SALzBuP,W,UCVhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAalC,OAAK,EAAC7B,MAAO,CAAEkB,UAAW,IAAvC,SACI,eAACiC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASnD,MAAO,CAAEgE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY5C,OAAb,CAAoBxK,OAAK,EAAzB,UACI,cAACoN,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,EAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,EAAA,EAAD,CAASK,WAAS,EAACxD,MAAO,CAAEgE,UAAW,MACvC,cAACb,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAACtD,EAAA,EAAD,CAAQgE,UAAQ,EAAC9C,MAAM,OAAOqC,QAAQ,QAAQpG,QAAQ,kBChB/D8B,oBAAS,WAEpB,IAAQnD,EAAkBiD,IAAlBjD,cACAvE,EAAkEuE,EAAlEvE,eAAgBb,EAAkDoF,EAAlDpF,iBAAkBQ,EAAgC4E,EAAhC5E,gBAAiBhG,EAAe4K,EAAf5K,WAC3D,EAAsC+S,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAaA,OALAC,qBAAU,WACF1N,EAAiBmK,MAAQ,GAAGtJ,MACjC,CAACb,EAAiBmK,KAAMtJ,IAIvB,eAAC8M,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAM,KAAnB,SACKhF,EAAc/E,iBAAmBmN,EAC9B,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIY,UAAW,EACXC,SAtBpB,WACIL,GAAe,GACfjN,EAAgB,IAAI9F,EAAaF,EAAYuT,YAAc,IAC3DlN,IAAiB9D,MAAK,kBAAM0Q,GAAe,OAoB3BO,SAAUR,KAAiBhT,GAAcA,EAAWuT,YAAcvT,EAAWyT,WAC7EC,aAAa,EAJjB,SAMI,cAAC,GAAD,QAIZ,cAACP,EAAA,EAAKC,OAAN,CAAaxD,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAACuD,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,cAAC+D,EAAA,EAAD,CAAQ1D,OAAQ+C,Y,mBCxCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAMhF,MAArC,mBAAOkF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY3S,MAAOyS,EAAKG,WAAaH,EAAKzS,MAA1C,UACI,gCAAQsS,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAKzS,MAClB,cAACyQ,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,MAAnB,SACKgE,EAAKzS,QACE,QCbbwM,oBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UACR,OACI,cAAC,KAAD,CACIqN,cAAe,CAAEC,MAAO,GAAIC,SAAU,GAAIhT,MAAO,MACjDiT,SAAU,SAACtL,EAAD,OAAWuL,EAAX,EAAWA,UAAX,OAA2BzN,EAAUxD,MAAM0F,GAAQ+D,OAAM,SAAA1L,GAAK,OACpEkT,EAAU,CAAElT,MAAO,kCAH3B,SAIK,gBAAGmT,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAchT,EAA/B,EAA+BA,OAA/B,OACG,eAAC,KAAD,CAAMiT,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAC/E,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAAQ,yBAAyB+D,MAAM,OAAOiC,UAAU,WACxE,cAAC2B,GAAD,CAAa/E,KAAK,QAAQiG,YAAY,UACtC,cAAClB,GAAD,CAAa/E,KAAK,WAAWiG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CAAclG,KAAK,QAAQmG,OAAQ,kBAAM,cAAChD,EAAA,EAAD,CAAOrD,MAAO,CAACsG,aAAa,IAAKvE,OAAK,EAACV,MAAM,MAAM/D,QAAStK,EAAOJ,WAC5G,cAACuN,EAAA,EAAD,CAAQlJ,QAAS+O,EAAc5F,UAAQ,EAAC9C,QAAQ,QAAQ8I,KAAK,SAASvE,OAAK,a,mBCbhF,SAAS0E,GAAT,GAA8C,IAAlBvT,EAAiB,EAAjBA,OACvC,OACI,cAACwT,GAAA,EAAD,CAAS5T,OAAK,EAAd,SACKI,GACG,cAACwT,GAAA,EAAQ9D,KAAT,UACK1P,EAAO4P,KAAI,SAAC6D,EAAUC,GAAX,OACR,eAACF,GAAA,EAAQ/G,KAAT,eAAwBgH,EAAxB,MAAmBC,UCJ5BtH,oBAAS,WACpB,IAAQ/G,EAAc6G,IAAd7G,UACR,OACI,cAAC,KAAD,CACIqN,cAAe,CAAEhP,YAAa,GAAIzB,SAAU,GAAI0Q,MAAO,GAAIC,SAAU,GAAIhT,MAAO,MAChFiT,SAAU,SAACtL,EAAD,OAAWuL,EAAX,EAAWA,UAAX,OAA2BzN,EAAUtD,SAASwF,GAAQ+D,OAAM,SAAA1L,GAAK,OACvEkT,EAAU,CAAElT,cAChB+T,iBAAoBC,KAAW,CAC3BlQ,YAAakQ,OAAaC,WAC1B5R,SAAU2R,OAAaC,WACvBlB,MAAOiB,OAAaC,WAAWlB,QAC/BC,SAAUgB,OAAaC,aAR/B,SAWK,gBAAGd,EAAH,EAAGA,aAAcC,EAAjB,EAAiBA,aAAchT,EAA/B,EAA+BA,OAAQ8T,EAAvC,EAAuCA,QAASC,EAAhD,EAAgDA,MAAhD,OACG,eAAC,KAAD,CAAMd,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAAC/E,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAAQ,2BAA2B+D,MAAM,OAAOiC,UAAU,WAC1E,cAAC2B,GAAD,CAAa/E,KAAK,cAAciG,YAAY,iBAC5C,cAAClB,GAAD,CAAa/E,KAAK,WAAWiG,YAAY,aACzC,cAAClB,GAAD,CAAa/E,KAAK,QAAQiG,YAAY,UACtC,cAAClB,GAAD,CAAa/E,KAAK,WAAWiG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CAAclG,KAAK,QAAQmG,OAAQ,kBAC/B,cAACE,GAAD,CAAkBvT,OAAQA,EAAOJ,WAErC,cAACuN,EAAA,EAAD,CAAQgE,UAAW2C,IAAYC,GAASf,EAAc/O,QAAS+O,EAAc5F,UAAQ,EAAC9C,QAAQ,WAAW8I,KAAK,SAASvE,OAAK,aCzBjIzC,gBAAS,WACpB,MAAkCF,IAA1B7G,EAAR,EAAQA,UAAWmE,EAAnB,EAAmBA,WACnB,OACI,cAAC2G,EAAA,EAAD,CAAS7D,UAAQ,EAACgE,UAAU,SAASvC,UAAQ,EAACkF,UAAU,WAAxD,SACI,eAACzG,EAAA,EAAD,CAAWmB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACgB,EAAA,EAAD,CAAOU,KAAK,UAAUlB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEsG,aAAc,MADnF,iBAICjO,EAAU2O,WACP,qCACI,cAAC7F,EAAA,EAAD,CAAQzB,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,2BACjC,cAAC6C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAcoB,KAAK,OAAO1B,UAAQ,EAAvD,kCAKJ,qCACA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMtE,EAAWa,UAAU,cAAC,GAAD,MAAgB2D,KAAK,OAAO1B,UAAQ,EAAhF,oBAGA,cAACa,EAAA,EAAD,CAAQW,QAAS,kBAAMtE,EAAWa,UAAU,cAAC,GAAD,MAAmB2D,KAAK,OAAO1B,UAAQ,EAAnF,kC,mBCpBL,SAAS2H,GAAT,GAA2E,IAAD,IAA/C3H,gBAA+C,aAAhChC,eAAgC,MAAtB,aAAsB,EACrF,OACI,cAAC4J,GAAA,EAAD,CAAQ5F,QAAQ,EAAMhC,SAAUA,EAAhC,SACI,cAAC0F,EAAA,EAAD,CAAQ1H,QAASA,MCDd,SAAS6J,GAAWjC,GAC/B,MAAsBC,aAASD,EAAMhF,MAArC,mBAAOkF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY3S,MAAOyS,EAAKG,WAAaH,EAAKzS,MAA1C,UACI,gCAAQsS,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAKzS,MAClB,cAACyQ,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,MAAnB,SACKgE,EAAKzS,QACE,Q,cCTb,SAASwU,GAAclC,GAClC,MAA+BC,aAASD,EAAMhF,MAA9C,mBAAOkF,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KACA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY3S,MAAOyS,EAAKG,WAAaH,EAAKzS,MAA1C,UACI,gCAAQsS,EAAMO,QACd,cAAC6B,GAAA,EAAD,CACIC,WAAS,EACTC,QAAStC,EAAMsC,QACfjQ,MAAO6N,EAAM7N,OAAS,KACtBiK,SAAU,SAACQ,EAAGyF,GAAJ,OAAUJ,EAAQK,SAASD,EAAElQ,QACvCoQ,OAAQ,kBAAMN,EAAQO,YAAW,IACjCzB,YAAajB,EAAMiB,cAEtBd,EAAKG,SAAWH,EAAKzS,MAClB,cAACyQ,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,MAAnB,SACKgE,EAAKzS,QACE,QC3BrB,IAAMiV,GACT,CACI,CAAElH,KAAM,SAAUpJ,MAAO,UACzB,CAAEoJ,KAAM,UAAWpJ,MAAO,WAC1B,CAAEoJ,KAAM,OAAQpJ,MAAO,QACvB,CAAEoJ,KAAM,OAAQpJ,MAAO,QACvB,CAAEoJ,KAAM,QAASpJ,MAAO,SACxB,CAAEoJ,KAAM,SAAUpJ,MAAO,W,qBCFlB,SAASuQ,GAAY5C,GAChC,MAA+BC,aAASD,EAAMhF,MAA9C,mBAAOkF,EAAP,KAAcC,EAAd,KAAoBgC,EAApB,KACA,OACI,eAAC/B,GAAA,EAAKC,MAAN,CAAY3S,MAAOyS,EAAKG,WAAaH,EAAKzS,MAA1C,UACI,cAAC,KAAD,uCACQwS,GACAF,GAFR,IAGI6C,SAAW3C,EAAM7N,OAAS,IAAIuB,KAAKsM,EAAM7N,QAAW,KACpDiK,SAAU,SAAAjK,GAAK,OAAI8P,EAAQK,SAASnQ,OAEvC8N,EAAKG,SAAWH,EAAKzS,MAClB,cAACyQ,EAAA,EAAD,CAAOtB,OAAK,EAACV,MAAM,MAAnB,SACKgE,EAAKzS,QACE,Q,cCAbwM,gBAAS,WAEpB,IAAMlM,EAAU8U,eACR/L,EAAkBiD,IAAlBjD,cACAjD,EAC8BiD,EAD9BjD,eAAgBG,EACc8C,EADd9C,eACnBjB,EAAiC+D,EAAjC/D,aAAchB,EAAmB+E,EAAnB/E,eACX7C,EAAO4T,eAAP5T,GAER,EAAgC+P,mBAA6B,IAAInO,GAAjE,mBAAO1B,EAAP,KAAiBsD,EAAjB,KAEM8O,EAAmBC,KAAW,CAChCzQ,MAAOyQ,OAAaC,SAAS,8BAC7BxQ,YAAauQ,OAAaC,SAAS,oCACnCzQ,SAAUwQ,OAAaC,SAAS,iCAChCtQ,KAAMqQ,OAAaC,SAAS,6BAC5BrQ,MAAOoQ,OAAaC,SAAS,8BAC7BvQ,KAAMsQ,OAAaC,SAAS,oBAAoBqB,aAoBpD,OAjBA3D,qBAAU,WACFlQ,GAAI6D,EAAa7D,GAAIT,MAAK,SAAAW,GAAQ,OAAIsD,EAAY,IAAI5B,EAAmB1B,SAC9E,CAACF,EAAI6D,IAeJhB,EAAuB,cAAC+P,GAAD,CAAkB3J,QAAQ,wBAGjD,eAAC6F,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAACtC,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmBuG,KAAG,EAACxC,MAAM,SAC7C,cAAC,KAAD,CACIsF,iBAAkBA,EAClBwB,oBAAkB,EAClBzC,cAAenR,EACfsR,SAAU,SAAAtL,GAAM,OArB5B,SAA0BhG,GACtB,GAAKA,EAASF,GAOV8E,EAAe5E,GAAUX,MAAK,kBAAMV,EAAQC,KAAR,sBAA4BoB,EAASF,YAP3D,CACd,IAAI6E,EAAW,2BACR3E,GADQ,IAEXF,GAAI+T,iBAERpP,EAAeE,GAAatF,MAAK,kBAAMV,EAAQC,KAAR,sBAA4B+F,EAAY7E,SAevDgU,CAAiB9N,IAJzC,SAKK,gBAAGwL,EAAH,EAAGA,aAAce,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAAce,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMd,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAa/E,KAAK,QAAQiG,YAAY,UACtC,cAACgB,GAAD,CAAYhB,YAAY,cAAcmC,KAAM,EAAGpI,KAAK,gBACpD,cAACkH,GAAD,CAAeI,QAASK,GAAiB1B,YAAY,WAAWjG,KAAK,aACrE,cAAC4H,GAAD,CACIS,gBAAgB,OAChBrI,KAAK,OACLsI,gBAAc,EACdC,YAAY,OACZC,WAAW,wBAEf,cAACvH,EAAA,EAAD,CAAQ7D,QAAQ,mBAAmBuG,KAAG,EAACxC,MAAM,SAC7C,cAAC4D,GAAD,CAAakB,YAAY,OAAOjG,KAAK,SACrC,cAAC+E,GAAD,CAAakB,YAAY,QAAQjG,KAAK,UACtC,cAACC,EAAA,EAAD,CACIgE,SAAU6B,IAAiBe,IAAUD,EACrC7P,QAAS+O,EAActC,QAAQ,QAC/BtD,UAAQ,EAACgG,KAAK,SAAS9I,QAAQ,WACnC,cAAC6C,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAc8D,QAAQ,QAAQ0C,KAAK,SAAS9I,QAAQ,uB,oBCtElF8B,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAC5CJ,EAAiB0B,IAAjB1B,aAWR,OATA+G,qBAAU,WAIN,OAHI3G,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAGd,qCACI,cAACuF,EAAA,EAAD,CACIG,UAAU,SACVlC,SAAS,MACT9B,UAAQ,EACR+B,MAAM,OACNrB,MAAO,CAAE2I,OAAQ,QALrB,SAOI,cAACxH,EAAA,EAAD,sCAEJ,eAACgC,EAAA,EAAD,CAAS/B,UAAQ,EAACqC,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAACtL,EAAD,OAAWqO,EAAX,EAAWA,UAAX,OACNpL,EAAasB,WAAWvE,GAAQ3G,MAAK,kBAAMgV,QAC/ClD,cAAe,CAAE7R,KAAM,IACvB8S,iBAAkBC,KAAW,CACzB/S,KAAM+S,OAAaC,aAL3B,SAQK,gBAAGb,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASf,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAO/F,KAAK,OAAZ,SACK,SAACgF,GAAD,OACG,sBAAKlF,MAAO,CAAEK,SAAU,YAAxB,UACI,cAAC2E,EAAA,EAAD,CAAQ1D,OAAQ0E,IAChB,kDACIG,YAAY,qBACZmC,KAAM,GACFpD,EAAME,OAHd,IAIIyD,WAAY,SAAA7G,GACM,UAAVA,EAAE3O,KAAmB2O,EAAE8G,UAGb,UAAV9G,EAAE3O,KAAoB2O,EAAE8G,WACxB9G,EAAEC,iBACF6E,GAAWf,oBAU/C,cAACgD,GAAA,EAAQ3F,MAAT,UACK5F,EAAaC,SAASmF,KAAI,SAAApE,GAAO,OAC9B,eAACuK,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBlJ,IAAKtB,EAAQ7H,OAAS,qBACtC,eAACoS,GAAA,EAAQpH,QAAT,WACI,cAACoH,GAAA,EAAQE,OAAT,CAAgBvJ,GAAIkB,IAAMhB,GAAE,oBAAepB,EAAQvJ,UAAnD,SACKuJ,EAAQ9H,cACb,cAACqS,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoB3K,EAAQC,WAAlC,YAEJ,eAACsK,GAAA,EAAQK,KAAT,CAAcpJ,MAAO,CAAEqJ,WAAY,YAAnC,UAAmD7K,EAAQ3K,KAA3D,YARM2K,EAAQnK,kBCjExCiV,GAAqB,CACvB/P,OAAQ,mBAGNgQ,GAAyB,CAC3BlJ,SAAU,WACVmJ,OAAQ,KACRC,KAAM,KACNxI,MAAO,OACPyI,OAAQ,OACRrI,MAAO,SAOIjC,gBAAS,YAAsD,IAAD,IAAnB7K,EAAmB,EAAnBA,SACtD,EAA+E2K,IAAvEjD,cAAiB3C,EAAzB,EAAyBA,iBAAkBrC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBACpD,OACI,eAAC2J,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASpB,OAAK,EAACX,SAAS,MAAMpB,MAAO,CAAE2J,QAAS,KAAhD,UACKpV,EAASkF,aACN,cAAC4J,EAAA,EAAD,CAAOrD,MAAO,CAAEK,SAAU,WAAYuJ,OAAQ,IAAMH,MAAO,GAAII,IAAK,IAAMC,QAAM,EAACzI,MAAM,MAAM/D,QAAQ,aAEzG,cAACgD,EAAA,EAAD,CAAOR,IAAG,iCAA4BvL,EAAS6B,SAArC,QAAqDyL,OAAK,EAAC7B,MAAOsJ,KAC5E,cAACnG,EAAA,EAAD,CAASnD,MAAOuJ,GAAwBxH,OAAK,EAA7C,SACI,cAACtC,GAAA,EAAK2D,MAAN,UACI,cAAC3D,GAAA,EAAD,UACI,eAACA,GAAA,EAAKkC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACL1D,QAAS/I,EAAS4B,MAClB6J,MAAO,CAAEqB,MAAO,WAEpB,4BAAItG,kBAAOxG,EAAS+B,KAAO,iBAC3B,2CACc,uCAAS,eAAC,IAAD,CAAMsJ,GAAE,8BAAerL,EAASoE,YAAxB,aAAe,EAAe1D,UAAtC,oBAAoDV,EAASoE,YAA7D,aAAoD,EAAejC,YAAnE,OAAT,sBAOlC,cAACyM,EAAA,EAAD,CAASM,UAAQ,EAACrC,SAAS,SAA3B,SACK7M,EAASkE,OACN,qCACI,cAAC0H,EAAA,EAAD,CAAQkB,MAAO9M,EAASkF,YAAc,QAAU,MAAOsQ,OAAO,OAC1DhI,OAAK,EAACzE,QAAS/I,EAASkF,YAAc,uBAAyB,kBAC/DqH,QAAStH,EACTvC,QAASA,IAEb,cAACkJ,EAAA,EAAD,CAAQT,GAAIkB,IACRuD,SAAU5P,EAASkF,YACnBmG,GAAE,kBAAarL,EAASF,IACxBgN,MAAM,SAASqC,QAAQ,QAH3B,6BAOJnP,EAAS+D,QACT,cAAC6H,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAASxH,EAAnC,+BAEA,cAAC6G,EAAA,EAAD,CAAQgE,SAAU5P,EAASkF,YAAaxC,QAASA,EAAS6J,QAASxH,EAAkB+H,MAAM,OAA3F,mCC5DLjC,gBAAS,YAAkD,IAAnB7K,EAAkB,EAAlBA,SACnD,OACI,eAAC4O,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAAS/B,SAAS,MAAlB,SACI,eAACoD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACqB,GAAA,EAAD,CAAMtB,KAAK,QAAQK,MAAM,OAAOnB,KAAK,WAEzC,cAACsE,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,4BAAI1M,EAAS8B,qBAIzB,cAAC8M,EAAA,EAAD,CAAS/B,UAAQ,EAAjB,SACI,eAACoD,EAAA,EAAD,CAAMwF,cAAc,SAApB,UACI,cAACxF,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACqB,GAAA,EAAD,CAAMpC,KAAK,WAAWc,KAAK,QAAQK,MAAM,WAE7C,cAACmD,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACR,+BACGlG,kBAAOxG,EAAS+B,KAAO,gCAK1B,cAAC6M,EAAA,EAAD,CAAS/B,UAAQ,EAAjB,SACI,eAACoD,EAAA,EAAD,CAAMwF,cAAc,SAApB,UACI,cAACxF,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,SACI,cAACqB,GAAA,EAAD,CAAMpC,KAAK,SAASc,KAAK,QAAQK,MAAM,WAE3C,cAACmD,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,iCAAO1M,EAASiC,MAAhB,KAAyBjC,EAASgC,qBC/B3C6I,gBAAS,YAA4E,IAAD,IAAxC7K,SAAYgE,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KAC9E,OAAKJ,EAED,qCACI,eAAC4K,EAAA,EAAD,CACIG,UAAU,SACVtD,MAAO,CAAE2I,OAAQ,QACjBvH,SAAS,MACToC,WAAS,EACTlE,UAAQ,EACR+B,MAAM,OANV,UAQK9I,EAAU0R,OARf,IAQ6C,IAArB1R,EAAU0R,OAAe,SAAW,SAR5D,YAUA,cAAC9G,EAAA,EAAD,CAAS/B,UAAQ,EAAjB,SACI,cAACsB,GAAA,EAAD,CAAMwH,SAAO,EAACC,SAAO,EAArB,SACK5R,EAAUqK,KAAI,SAAA3J,GAAQ,OACnB,eAACwG,GAAA,EAAD,CAAMO,MAAO,CAAEK,SAAU,YAAzB,UACKpH,EAAShE,YAAT,OAAsB0D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM1D,WAC1B,cAACoO,EAAA,EAAD,CACKrD,MAAO,CAAEK,SAAU,YACnBgB,MAAM,SACNyI,OAAO,QAHZ,kBAOH,cAACxJ,EAAA,EAAD,CAAOU,KAAK,OAAOlB,IAAK7G,EAAStC,OAAS,qBAC1C,eAAC8I,GAAA,EAAKkC,QAAN,CAAcqI,cAAc,SAA5B,UACI,cAACvK,GAAA,EAAK0B,OAAN,CAAazB,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAe3G,EAAShE,UAAhC,SAA6CgE,EAASvC,gBAEzDuC,EAASW,WACV,cAAC6F,GAAA,EAAK2K,MAAN,CAAYpK,MAAO,CAAEqB,MAAO,UAA5B,4BAfoCpI,EAAShE,oBAhBlD,QCCZmK,gBAAS,WAEpB,IAAQnD,EAAkBiD,IAAlBjD,cACkB1H,EAAkE0H,EAApFlF,iBAA4BmB,EAAwD+D,EAAxD/D,aAAchB,EAA0C+E,EAA1C/E,eAAgBwC,EAA0BuC,EAA1BvC,sBAC1DrF,EAAO4T,eAAP5T,GAOR,OALAkQ,qBAAU,WAEN,OADIlQ,GAAI6D,EAAa7D,GACd,kBAAMqF,OACd,CAACrF,EAAI6D,EAAcwB,IAElBxC,IAAmB3C,EAAiB,cAAC0S,GAAD,IAGpC,eAACzC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,UACI,cAAC,GAAD,CAAwB1M,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBqJ,WAAYrJ,EAASF,QAE/C,cAACmQ,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,SACI,cAAC,GAAD,CAAyB1M,SAAUA,YC5BpC,SAAS8V,KACpB,IACA,EAA4BjG,mBAAS,MAArC,mBAAOpR,EAAP,KAAe8S,EAAf,KA0BA,OACI,qCACI,cAAC3E,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAAQ,yBACxB,cAAC6F,EAAA,EAAD,UACI,eAAChD,EAAA,EAAOiD,MAAR,CAAckH,OAAO,IAArB,UACI,cAACnK,EAAA,EAAD,CAAQW,QA7BxB,WACIpP,IAAMiC,IAAI4W,uBAA6BjM,OAAM,SAAAmI,GAAG,OAAIzO,QAAQC,IAAIwO,EAAI1U,cA4BvBuL,QAAQ,YAAYyE,OAAK,EAACyI,SAAO,IAClE,cAACrK,EAAA,EAAD,CAAQW,QA1BxB,WACIpP,IAAMiC,IAAI4W,yBAA+BjM,OAAM,SAAAmI,GAAG,OAAIzO,QAAQC,IAAIwO,EAAI1U,cAyBvBuL,QAAQ,cAAcyE,OAAK,EAACyI,SAAO,IACtE,cAACrK,EAAA,EAAD,CAAQW,QAXxB,WACIpP,IAAMoC,KAAKyW,iBAAwB,IAAIjM,OAAM,SAAAmI,GAAG,OAAIX,EAAUW,OAUVnJ,QAAQ,mBAAmByE,OAAK,EAACyI,SAAO,IAChF,cAACrK,EAAA,EAAD,CAAQW,QAxBxB,WACIpP,IAAMiC,IAAI4W,0BAAgCjM,OAAM,SAAAmI,GAAG,OAAIzO,QAAQC,IAAIwO,EAAI1U,cAuBvBuL,QAAQ,eAAeyE,OAAK,EAACyI,SAAO,IACxE,cAACrK,EAAA,EAAD,CAAQW,QArBxB,WACIpP,IAAMiC,IAAI4W,0BAAgCjM,OAAM,SAAAmI,GAAG,OAAIzO,QAAQC,IAAIwO,EAAI1U,cAoBtBuL,QAAQ,eAAeyE,OAAK,EAACyI,SAAO,IACzE,cAACrK,EAAA,EAAD,CAAQW,QAlBxB,WACIpP,IAAMiC,IAAI4W,2BAAiCjM,OAAM,SAAAmI,GAAG,OAAIzO,QAAQC,IAAIwO,EAAI1U,cAiB5BuL,QAAQ,WAAWyE,OAAK,EAACyI,SAAO,SAGvExX,GACG,cAACuT,GAAD,CAAkBvT,OAAQA,OC3C3B,SAASyX,KACpB,OACI,eAACtH,EAAA,EAAD,CAASgD,aAAW,EAApB,UACI,eAAChF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAACyB,GAAA,EAAD,CAAMpC,KAAK,WADf,gBAIA,cAACiD,EAAA,EAAQuH,OAAT,UACI,cAACvK,EAAA,EAAD,CAAQT,GAAIkB,IAAMhB,GAAG,cAAc4K,SAAO,EAA1C,0CCPDpL,oBAAU,WAAuB,IAAD,IACpC9M,EAAe4M,IAAf5M,YAEP,OACI,eAACkN,EAAA,EAAD,WACI,cAAC2B,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAAQ,iBACxB,cAAC6D,EAAA,EAAD,CAAQ0C,KAAG,EAACnE,GAAG,KAAK2B,MAAM,MAAM/D,QAAO,UAAEhL,EAAYM,aAAd,aAAE,EAAmB+X,WAC3D,UAAArY,EAAYM,aAAZ,eAAmBwB,UAChB,eAAC+O,EAAA,EAAD,WACI,cAAChC,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAAQ,cAAc+D,MAAM,SAC5C,uBAAMrB,MAAO,CAACkB,UAAU,QAAxB,cAAmC5O,EAAYM,MAAMwB,QAArD,gB,UCVLgL,gBAAS,WACpB,IAAQ5C,EAAe0C,IAAf1C,WAER,OACI,cAACoO,GAAA,EAAD,CAAOxN,KAAMZ,EAAWW,MAAMC,KAAMyN,QAASrO,EAAWC,WAAYuE,KAAK,OAAzE,SACI,cAAC4J,GAAA,EAAMjJ,QAAP,UACKnF,EAAWW,MAAMtJ,Y,UCJ5BiX,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE3X,IAAK,WAC1C,CAAE0X,SAAU,cAAeC,KAAM,CAAE3X,IAAK,SACxC,CAAE0X,SAAU,UAAWC,KAAM,CAAE3X,IAAK,aAEzB+L,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aAEJnB,EAIAmB,EAJAnB,mBACAnB,EAGAsC,EAHAtC,QACAQ,EAEA8B,EAFA9B,kBACAD,EACA+B,EADA/B,eAEJ+I,qBAAU,WACNnI,EAAmBnB,EAAShG,YAC7B,CAACmH,EAAoBnB,IAIxB,OACI,cAACgQ,GAAA,EAAIC,KAAL,CAAUjU,QAASwE,EAAnB,SACI,eAAC+I,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQuC,QAAQ,OAAO7C,KAAK,WACxBvD,QAAS,iBAEjB,eAACkH,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,UACI,cAACgK,GAAA,EAAD,CACIH,MAAOA,GACPK,KAAM,CAAE3H,WAAW,EAAM9C,UAAU,GACnC0K,YAAa,SAACpJ,EAAG5Q,GAAJ,OAdT,SAAC4Q,EAAmB5Q,GACxCgL,EAAmBnB,EAAShG,SAAU6V,GAAM1Z,EAAKia,aAAuBL,KAAK3X,KAanCiY,CAAgBtJ,EAAG5Q,MAEjD,uBACA,cAAC+Q,GAAA,EAAKiB,MAAN,CAAYmI,YAAa,EAAzB,SACK/P,EAAeoH,KAAI,SAACrO,GAAD,OAChB,eAAC4N,GAAA,EAAD,CACIzC,GAAIkB,IACJhB,GAAE,sBAAiBrL,EAASF,IAFhC,UAKI,cAACiM,EAAA,EAAD,CACIR,IAAG,iCAA4BvL,EAAS6B,SAArC,QACH4J,MAAO,CACHgE,UAAW,IAAKwH,UACZ,WAGZ,eAACrJ,GAAA,EAAKR,QAAN,WACI,cAACQ,GAAA,EAAKhB,OAAN,CACImC,UAAU,SADd,SACwB/O,EAAS4B,QACjC,eAACgM,GAAA,EAAKsJ,KAAN,CAAWnI,UAAU,SAArB,UACI,8BAAMvI,kBAAO,IAAIjC,KAAKvE,EAAS+B,MAAM,YACrC,8BAAMyE,kBAAO,IAAIjC,KAAKvE,EAAS+B,MAAM,oBAdxC/B,EAASF,oBCvC/B+K,gBAAS,WACpB,IAAO7B,EAAgB2B,IAAhB3B,aACAtC,EAAqDsC,EAArDtC,QAASI,EAA4CkC,EAA5ClC,WAAYC,EAAgCiC,EAAhCjC,kBAAmBC,EAAagC,EAAbhC,UAE/C,OACI,cAAC0P,GAAA,EAAIC,KAAL,CAAUjU,QAASqE,EAAnB,SACI,eAACkJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACE,EAAA,EAAD,CAAQuC,QAAQ,OAAO7C,KAAK,OAC5BvD,QAAsB,IAAb/B,EAAA,kCAAqCN,QAArC,IAAqCA,OAArC,EAAqCA,EAASvE,aAA9C,wBAAuEuE,QAAvE,IAAuEA,OAAvE,EAAuEA,EAASvE,YAAhF,qBAEb,cAAC8N,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACkB,GAAA,EAAKiB,MAAN,CAAYmI,YAAa,EAAzB,SACKlQ,EAAWuH,KAAI,SAAA3H,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQhG,yB,UCZvC,SAASyW,GAAT,GAAoD,IAApBC,EAAmB,EAAnBA,SACrCC,EAAW,CACbjD,OAAQ,kBACRnG,YAAa,OACbqJ,aAAc,MACdC,WAAY,OACZxI,UAAW,SACXoG,OAAQ,KAONqC,EAASC,uBAAY,SAAAC,GACvBN,EAASM,EAAcrJ,KAAI,SAACzN,GAAD,OAAeY,OAAOC,OAAOb,EAAM,CAC1D+W,QAASC,IAAIC,gBAAgBjX,WAElC,CAACwW,IACJ,EAAsDU,aAAY,CAAEN,WAA5DO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACI,gDAASF,KAAT,IAAyBtM,MAAOwM,EAAY,2BAAOZ,GAZtC,CACbpJ,YAAa,UAW+DoJ,EAA5E,UACI,qCAAWW,MACX,cAACjK,GAAA,EAAD,CAAMpC,KAAK,SAASc,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ7D,QAAQ,wB,qBCxBb,SAASmP,GAAT,GAA8D,IAAjCC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,WACtD,OACI,cAAC,KAAD,CACI7M,IAAK4M,EACL1M,MAAO,CAAC0J,OAAO,IAAKzI,MAAM,QAC1B2L,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCVlC,SAASC,GAAT,GAA4D,IAAhCnW,EAA+B,EAA/BA,QAAS/B,EAAsB,EAAtBA,YAChD,EAA0BkP,mBAAc,IAAxC,mBAAOiJ,EAAP,KAAc1B,EAAd,KACA,EAA8BvH,qBAA9B,mBAAO+I,EAAP,KAAgBR,EAAhB,KAcA,OANApI,qBAAU,WACN,OAAO,WACH8I,EAAM5V,SAAQ,SAACtC,GAAD,OAAegX,IAAImB,gBAAgBnY,EAAK+W,eAE3D,CAACmB,IAGA,eAAC7I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQE,MAAM,OAAO/D,QAAQ,wBAC7B,cAACoO,GAAD,CAAsBC,SAAUA,OAEpC,cAACnH,EAAA,EAAKC,OAAN,CAAaxD,MAAO,IACpB,eAACuD,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQE,MAAM,OAAO/D,QAAQ,2BAC5B+P,GAASA,EAAMpD,OAAS,GACrB,cAACwC,GAAD,CAAoBE,WAAYA,EAAYD,aAAcW,EAAM,GAAGnB,aAG3E,cAAC1H,EAAA,EAAKC,OAAN,CAAaxD,MAAO,IACpB,eAACuD,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,UACI,cAACE,EAAA,EAAD,CAAQE,MAAM,OAAO/D,QAAQ,iCAC5B+P,GAASA,EAAMpD,OAAS,GACrB,qCACI,qBAAKhE,UAAU,cAAcjG,MAAO,CAAEgE,UAAW,IAAKuJ,SAAU,YAChE,eAACpN,EAAA,EAAOiD,MAAR,CAAckH,OAAQ,EAAtB,UACI,cAACnK,EAAA,EAAD,CAAQlJ,QAASA,EAAS6J,QAhClD,WACQqM,GACAA,EAAQK,mBAAmBC,QAAO,SAAAC,GAAI,OAAIxY,EAAYwY,OA8BKtN,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQgE,SAAUlN,EAAS6J,QAAS,kBAAM6K,EAAS,KAAK9K,KAAK,sBCrC1EzB,oBAAS,YAA4C,IAAD,EAAlBnE,EAAkB,EAAlBA,QAC7C,EAC+DiE,IADvD3B,aAAgBoQ,EAAxB,EAAwBA,cAAezY,EAAvC,EAAuCA,YAAaiG,EAApD,EAAoDA,UAC/ClE,EADL,EACKA,QAAS1B,EADd,EACcA,aAAc6F,EAD5B,EAC4BA,gBAAiB5F,EAD7C,EAC6CA,YAC7C,EAAwC4O,oBAAS,GAAjD,mBAAOwJ,EAAP,KAAqBC,EAArB,KACA,EAA4BzJ,mBAAS,IAArC,mBAAO0J,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAC9C,GAAA,EAAIC,KAAL,UACI,eAAC1G,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,UACI,cAACE,EAAA,EAAD,CAAQuC,QAAQ,OAAO7C,KAAK,QAAQvD,QAAQ,WAC3CqQ,GACG,cAACxN,EAAA,EAAD,CAAQuD,QAAQ,QAAQ3B,OAAK,EACzBzE,QAASsQ,EAAe,SAAW,YACnC9M,QAAS,kBAAM+M,GAAiBD,SAI5C,cAACpJ,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACK2M,EACG,cAACR,GAAD,CAAmBlY,YA5BvC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,kBAAMia,GAAgB,OA2BsB5W,QAASkE,IAE5D,cAACgH,GAAA,EAAKiB,MAAN,oBACKnI,EAAQY,cADb,aACK,EAAgB+G,KAAI,SAAAhH,GAAK,OACtB,eAACuG,GAAA,EAAD,WACI,cAAC7B,EAAA,EAAD,CAAOR,IAAKlE,EAAMlI,MACjBia,GACG,eAACxN,EAAA,EAAOiD,MAAR,CAAcvB,OAAK,EAACyI,OAAQ,EAA5B,UACI,cAACnK,EAAA,EAAD,CACI6N,OAAK,EAAC3M,MAAM,QACZ/D,QAAQ,OACR4C,KAAMtE,EAAMvH,GACZ8P,SAAUvI,EAAME,OAChB7E,QAAS6W,IAAWlS,EAAMvH,IAAM4C,EAChC6J,QAAS,SAAAkB,GAAC,OAtCtD,SAA4BpG,EAAcoG,GACtC+L,EAAU/L,EAAEiM,cAAc/N,MAC1B3K,EAAaqG,GAoCyCsS,CAAmBtS,EAAMoG,MAE3C,cAAC7B,EAAA,EAAD,CACA4B,OAAK,EAACV,MAAM,MACZR,KAAK,QACLX,KAAMtE,EAAMvH,GACZ8P,SAAUvI,EAAME,OAChB7E,QAAS6W,IAAWlS,EAAMvH,IAAM+G,EAChC0F,QAAS,SAAAkB,GAAC,OAzClD,SAA2BpG,EAAaoG,GACpC+L,EAAU/L,EAAEiM,cAAc/N,MAC1B1K,EAAYoG,GAuCsCuS,CAAkBvS,EAAMoG,WAlBvCpG,EAAMvH,mBCpClC+K,gBAAS,YAA6C,IAAnBnE,EAAkB,EAAlBA,QACvCsC,EAAgB2B,IAAhB3B,aACDuN,EAAQ,CACV,CAAEC,SAAU,QAAS1E,OAAQ,kBAAM,cAAC4E,GAAA,EAAIC,KAAL,8BACnC,CAAEH,SAAU,SAAU1E,OAAQ,kBAAM,cAAC,GAAD,CAAepL,QAASA,MAC5D,CAAE8P,SAAU,SAAU1E,OAAQ,kBAAM,cAAC,GAAD,MACpC,CAAE0E,SAAU,YAAa1E,OAAQ,kBAAM,cAAC,GAAD,MACvC,CAAE0E,SAAU,YAAa1E,OAAQ,kBAAM,cAAC,GAAD,OAG3C,OACI,cAAC4E,GAAA,EAAD,CACIE,KAAM,CAAEtJ,OAAO,EAAMd,UAAU,GAC/BqN,aAAa,QACbtD,MAAOA,EACPM,YAAa,SAACpJ,EAAG5Q,GAAJ,OAAamM,EAAa7B,aAAatK,EAAKia,mB,oBClBtDjM,gBAAU,YAAyC,IAAjBnE,EAAgB,EAAhBA,QAC7C,OACI,cAACkI,EAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,SACI,cAACxB,GAAA,EAAK2D,MAAN,UACI,eAAC3D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKa,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQlB,IAAK7E,EAAQtE,OAAS,qBACtD,cAAC8I,GAAA,EAAKkC,QAAN,CAAcqI,cAAc,SAA5B,SACI,cAAC7I,EAAA,EAAD,CAAQzB,GAAG,KAAKpC,QAASrC,EAAQvE,uBAKjD,eAAC8N,EAAA,EAAKC,OAAN,CAAaxD,MAAO,EAApB,UACI,eAACoN,GAAA,EAAUjL,MAAX,CAAiBkH,OAAQ,EAAzB,UACI,cAAC+D,GAAA,EAAD,CAAW5I,MAAM,YAAYlO,MAAO0D,EAAQpB,iBAC5C,cAACwU,GAAA,EAAD,CAAW5I,MAAM,YAAYlO,MAAO0D,EAAQiB,oBAEhD,cAACoS,GAAA,EAAD,IACA,cAAC,GAAD,CAAcrT,QAASA,eCrB5BmE,gBAAS,WACpB,IAAQnK,EAAagT,eAAbhT,SACAsI,EAAiB2B,IAAjB3B,aACArC,EAAuDqC,EAAvDrC,eAAgBS,EAAuC4B,EAAvC5B,YAAaV,EAA0BsC,EAA1BtC,QAASS,EAAiB6B,EAAjB7B,aAS9C,OAPA6I,qBAAU,WAEN,OADA5I,EAAY1G,GACL,WACHyG,EAAa,MAElB,CAACC,EAAa1G,IAEbiG,EAAuB,cAAC+L,GAAD,CAAkB3J,QAAQ,uBAGjD,cAACkH,EAAA,EAAD,UACI,eAACA,EAAA,EAAKC,OAAN,CAAaxD,MAAO,GAApB,UACKhG,GACG,cAAC,GAAD,CAAeA,QAASA,IAC5B,cAAC,GAAD,CAAgBA,QAASA,Y,2BCrB1B,SAASsT,GAAT,GAA6D,IAA3BC,EAA0B,EAArCC,UAAyBC,EAAY,mBACpD1H,EAAe9H,IAA3B7G,UAAY2O,WAEnB,OACI,cAAC,KAAD,2BACQ0H,GADR,IAEIrI,OAAQ,SAACnB,GAAD,OAAW8B,EAAa,cAACwH,EAAD,eAAetJ,IAAY,cAAC,KAAD,CAAUtF,GAAG,UCkDrER,oBA5Cf,WAEE,IAAMuP,EAAWC,eACjB,EAAmC1P,IAA3B5M,EAAR,EAAQA,YAAa+F,EAArB,EAAqBA,UAUrB,OARAkM,qBAAU,WACJjS,EAAYF,MACdiG,EAAUyE,UAAU+R,SAAQ,kBAAMvc,EAAY2K,kBAE9C3K,EAAY2K,iBAEb,CAAC3K,EAAa+F,IAEb/F,EAAY0K,UAGd,eAAC,WAAD,WACE,cAAC,IAAD,CAAgBqD,SAAS,eAAeyO,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOjP,OAAK,EAACkP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CACED,KAAM,QACN1I,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAAC7G,EAAA,EAAD,CAAWQ,MAAO,CAAEkB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAACqN,GAAD,CAAc1O,OAAK,EAACkP,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAAStb,KAC5B,cAACkb,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWpE,KACxC,cAAC,KAAD,CAAO0E,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,KAAD,CAAOZ,UAAWhE,mBApBE,cAACxD,GAAD,CAAkB3J,QAAQ,sBClB/CgS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5b,MAAK,YAAkD,IAA/C6b,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACpB,IAAOC,EAAYnB,eAAZmB,SAMP,OAJAxL,qBAAU,WACN5H,OAAOqT,SAAS,EAAE,KACnB,CAACD,IAEG,KCIJ,IAAM7c,GAAU+c,eAEvBC,IAAS7J,OACP,cAACrH,EAAamR,SAAd,CAAuB5Y,MAAOlF,EAA9B,SACE,eAAC,KAAD,CAAQa,QAASA,GAAjB,UACE,cAAC4c,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.716fa87d.chunk.js","sourcesContent":["export interface Pagination {\r\n    currentPage : number;\r\n    itemsPerPage : number;\r\n    totalItems: number;\r\n    totalPages: number;\r\n}\r\n\r\nexport class PaginatedResult<T>{\r\n    data : T;\r\n    pagination: Pagination;\r\n\r\n    constructor(data: T , pagination: Pagination){\r\n        this.data = data;\r\n        this.pagination = pagination;\r\n    }\r\n}\r\n\r\nexport class PagingParams {\r\n    pageNumber;\r\n    pageSize;\r\n\r\n    constructor(pageNumber = 1, pageSize = 5){\r\n        this.pageNumber = pageNumber;\r\n        this.pageSize = pageSize;\r\n    }\r\n\r\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\r\nimport { toast } from \"react-toastify\";\r\nimport { history } from \"../..\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { PaginatedResult } from \"../models/pagination\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"../stores/store\";\r\n\r\nconst sleep = (delay: number) => {\r\n    return new Promise((resolve) => {\r\n        setTimeout(resolve, delay)\r\n    })\r\n}\r\n\r\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\r\n\r\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\r\n\r\naxios.interceptors.request.use(config => {\r\n    const token = store.commonStore.token;\r\n    if (token) config.headers.Authorization = `Bearer ${token}`;\r\n    return config;\r\n});\r\n\r\naxios.interceptors.response.use(async response => {\r\n    if(process.env.NODE_ENV === 'development') await sleep(1000);\r\n    const pagination = response.headers['pagination'];\r\n    if (pagination) {\r\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\r\n        return response as AxiosResponse<PaginatedResult<any>>;\r\n    }\r\n    return response;\r\n}, (error: AxiosError) => {\r\n    const { data, status, config } = error.response!;\r\n    switch (status) {\r\n        case 400:\r\n            if (typeof data === 'string') {\r\n                toast.error(data);\r\n            }\r\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\r\n                history.push('/not-found');\r\n            }\r\n\r\n            if (data.errors) {\r\n                const modalStateErrors = [];\r\n                for (const key in data.errors) {\r\n                    if (data.errors[key]) {\r\n                        modalStateErrors.push(data.errors[key]);\r\n                    }\r\n                }\r\n                throw modalStateErrors.flat();\r\n            } else {\r\n                toast.error(data);\r\n            }\r\n            break;\r\n        case 401:\r\n            toast.error('unauthorised');\r\n            break;\r\n        case 404:\r\n            history.push('/not-found');\r\n            break;\r\n        case 500:\r\n            store.commonStore.setServerError(data);\r\n            history.push('/server-error');\r\n            break;\r\n\r\n\r\n        default:\r\n            break;\r\n    }\r\n    return Promise.reject(error);\r\n})\r\n\r\nconst request = {\r\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\r\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\r\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\r\n    delete: <T>(url: string) => axios.delete<T>(url).then(responseBody),\r\n}\r\n\r\nconst Activities = {\r\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params }).then(responseBody),\r\n    details: (id: string) => request.get<Activity>(`/activities/${id}`),\r\n    create: (activity: ActivityFormValues) => axios.post<void>('/activities', activity),\r\n    update: (activity: ActivityFormValues) => axios.put<void>(`/activities/${activity.id}`, activity),\r\n    delete: (id: string) => axios.delete<void>(`/activities/${id}`),\r\n    attend: (id: string) => request.post<void>(`/activities/${id}/attend`, {})\r\n}\r\n\r\nconst Account = {\r\n    current: () => request.get<User>('/account'),\r\n    login: (user: UserFormValues) => request.post<User>('/account/login', user),\r\n    register: (user: UserFormValues) => request.post<User>('/account/register', user)\r\n}\r\n\r\nconst Profiles = {\r\n    get: (username: string) => request.get<Profile>(`/profiles/${username}`),\r\n    uploadPhoto: (file: Blob) => {\r\n        let formData = new FormData();\r\n        formData.append('File', file);\r\n        return axios.post<Photo>('photos', formData, {\r\n            headers: { 'content-type': 'multipart/form-data' }\r\n        })\r\n    },\r\n    setMainPhoto: (id: string) => request.post(`/photos/${id}/setMain`, {}),\r\n    deletePhoto: (id: string) => request.delete(`/photos/${id}`),\r\n    updateFollowing: (username: string) => request.post(`/follow/${username}`, {}),\r\n    listFollowings: (username: string, predicate: string) => request.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\r\n    listActivities: (username: string, predicate: string) => request.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\r\n}\r\n\r\nconst agent = {\r\n    Activities,\r\n    Account,\r\n    Profiles\r\n}\r\n\r\nexport default agent;","import { Profile } from \"./profile\";\r\n\r\nexport interface Activity {\r\n    id: string;\r\n    title: string;\r\n    date: Date | null;\r\n    description: string;\r\n    category: string;\r\n    city: string;\r\n    venue: string;\r\n    hostUsername:string;\r\n    isCancelled: boolean;\r\n    isGoing: boolean;\r\n    isHost: boolean;\r\n    host?: Profile;\r\n    attendees: Profile[];\r\n}\r\n\r\nexport class Activity implements Activity{\r\n    constructor(init?: ActivityFormValues){\r\n        Object.assign(this.id, init);\r\n    }\r\n}\r\n\r\nexport class ActivityFormValues{\r\n    id?: string = undefined;\r\n    title: string = '';\r\n    category:string = '';\r\n    description : string = '';\r\n    date: Date | null = null;\r\n    city: string = '';\r\n    venue: string = '';\r\n\r\n    constructor(activity?: ActivityFormValues){\r\n        if(activity){\r\n            this.id = activity.id;\r\n            this.title = activity.title;\r\n            this.category = activity.category;\r\n            this.description = activity.description;\r\n            this.date = activity.date;\r\n            this.city = activity.city;\r\n            this.venue = activity.venue\r\n        }\r\n    }\r\n}","import { User } from \"./user\";\r\n\r\nexport interface Profile {\r\n    username: string;\r\n    displayName: string;\r\n    image?: string;\r\n    bio?: string;\r\n    followersCount : number;\r\n    followingCount : number;\r\n    following : boolean;\r\n    photos?:Photo[];\r\n}\r\n\r\nexport class Profile implements Profile {\r\n    constructor(user: User){\r\n        this.username = user.username;\r\n        this.displayName = user.displayName;\r\n        this.image = user.image;\r\n    }\r\n}\r\n\r\nexport interface Photo {\r\n    id:string;\r\n    url:string;\r\n    isMain:boolean;\r\n}\r\n\r\nexport interface UserActivity{\r\n    id:string;\r\n    title:string;\r\n    category:string;\r\n    date:Date;\r\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Activity, ActivityFormValues } from \"../models/activity\";\r\nimport { format } from \"date-fns\";\r\nimport { store } from \"./store\";\r\nimport { Profile } from \"../models/profile\";\r\nimport { Pagination, PagingParams } from \"../models/pagination\";\r\nimport { restElement } from \"@babel/types\";\r\nexport default class ActivityStore {\r\n    activityRegistry = new Map<string, Activity>();\r\n    selectedActivity: Activity | undefined = undefined;\r\n    editMode = false;\r\n    loading = false;\r\n    loadingInitial = false;\r\n    pagination: Pagination | null = null;\r\n    pagingParams = new PagingParams();\r\n    predicate = new Map().set('all', true);\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.predicate.keys(),\r\n            () => {\r\n                this.pagingParams = new PagingParams();\r\n                this.activityRegistry.clear();\r\n                this.loadActivities();\r\n            }\r\n        )\r\n    }\r\n\r\n    setPagingParams = (pagingParams: PagingParams) => {\r\n        this.pagingParams = pagingParams;\r\n    }\r\n\r\n    setPredicate = (predicate: string, value: string | Date) => {\r\n        const resetPredicate = () => {\r\n            this.predicate.forEach((value, key) => {\r\n                if (key !== 'startDate') this.predicate.delete(key);\r\n            })\r\n        }\r\n        switch (predicate) {\r\n            case 'all':\r\n                resetPredicate();\r\n                this.predicate.set('all', true);\r\n                break;\r\n            case 'isGoing':\r\n                resetPredicate();\r\n                this.predicate.set('isGoing', true);\r\n                break;\r\n            case 'isHost':\r\n                resetPredicate();\r\n                this.predicate.set('isHost', true);\r\n                break;\r\n            case 'startDate':\r\n                this.predicate.delete('startDate');\r\n                this.predicate.set('startDate', value);\r\n        }\r\n    }\r\n\r\n    get axiosParams() {\r\n        const params = new URLSearchParams();\r\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\r\n        params.append('pageSize', this.pagingParams.pageSize.toString());\r\n        this.predicate.forEach((value, key) => {\r\n            if (key === 'startDate') {\r\n                params.append(key, (value as Date).toISOString())\r\n            } else {\r\n                params.append(key, value);\r\n            }\r\n        })\r\n        return params;\r\n    }\r\n\r\n\r\n    get activitiesByDate() {\r\n        return Array.from(this.activityRegistry.values()).sort((a, b) => a.date!.getTime() - b.date!.getTime());\r\n    }\r\n\r\n    get groupedActivites() {\r\n        return Object.entries(\r\n            this.activitiesByDate.reduce((activities, activity) => {\r\n                const date = format(activity.date!, 'dd MMM yyyy');\r\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\r\n                return activities;\r\n            }, {} as { [key: string]: Activity[] })\r\n        )\r\n    }\r\n\r\n    loadActivities = async () => {\r\n        this.loadingInitial = true;\r\n        try {\r\n            const result = await agent.Activities.list(this.axiosParams);\r\n            result.data.forEach(activity => {\r\n                this.setActivity(activity);\r\n            })\r\n            this.setPagination(result.pagination);\r\n            this.setLoadingInitial(false);\r\n        } catch (error) {\r\n            console.log(error);\r\n            this.setLoadingInitial(false);\r\n        }\r\n    }\r\n\r\n    setPagination = (pagination: Pagination) => {\r\n        this.pagination = pagination;\r\n    }\r\n\r\n    loadActivity = async (id: string) => {\r\n        let activity = this.getActivity(id);\r\n        if (activity) {\r\n            this.selectedActivity = activity;\r\n            return activity;\r\n        } else {\r\n            this.loadingInitial = true;\r\n            try {\r\n                activity = await agent.Activities.details(id);\r\n                this.setActivity(activity);\r\n                runInAction(() => {\r\n                    this.selectedActivity = activity;\r\n                })\r\n                this.setLoadingInitial(false);\r\n                return activity;\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    private getActivity = (id: string) => {\r\n        return this.activityRegistry.get(id);\r\n    }\r\n\r\n    private setActivity = (activity: Activity) => {\r\n        const user = store.userStore.user;\r\n        if (user) {\r\n            activity.isGoing = activity.attendees!.some(\r\n                a => a.username === user.username\r\n            )\r\n            activity.isHost = activity.hostUsername === user.username;\r\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\r\n        }\r\n        activity.date = new Date(activity.date!);\r\n        this.activityRegistry.set(activity.id, activity);\r\n    }\r\n\r\n    setLoadingInitial = (state: boolean) => {\r\n        this.loadingInitial = state;\r\n    }\r\n\r\n    createActivity = async (activity: ActivityFormValues) => {\r\n        const user = store.userStore.user;\r\n        const attendee = new Profile(user!);\r\n\r\n        try {\r\n            await agent.Activities.create(activity);\r\n            const newActivity = new Activity(activity);\r\n            newActivity.hostUsername = user!.username;\r\n            newActivity.attendees = [attendee];\r\n            this.setActivity(newActivity)\r\n            runInAction(() => {\r\n                this.selectedActivity = newActivity;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    updateActivity = async (activity: ActivityFormValues) => {\r\n        try {\r\n            await agent.Activities.update(activity);\r\n            runInAction(() => {\r\n                if (activity.id) {\r\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity };\r\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\r\n                    this.selectedActivity = updatedActivity as Activity;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    deleteActivity = async (id: string) => {\r\n        this.loading = true;\r\n        try {\r\n            agent.Activities.delete(id);\r\n            runInAction(() => {\r\n                this.activityRegistry.delete(id);\r\n                this.loading = false\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loading = false;\r\n            })\r\n        }\r\n    }\r\n\r\n    updateAttendance = async () => {\r\n        const user = store.userStore.user;\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                if (this.selectedActivity?.isGoing) {\r\n                    this.selectedActivity.attendees =\r\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\r\n                    this.selectedActivity.isGoing = false;\r\n                } else {\r\n                    const attendee = new Profile(user!);\r\n                    this.selectedActivity?.attendees?.push(attendee);\r\n                    this.selectedActivity!.isGoing = true;\r\n                }\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    cancelActivityToggle = async () => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Activities.attend(this.selectedActivity!.id);\r\n            runInAction(() => {\r\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\r\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n        } finally {\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    clearSelectedActivity = () => {\r\n        this.selectedActivity = undefined;\r\n    }\r\n\r\n    updateAttendeeFollowing = (username: string) => {\r\n        this.activityRegistry.forEach(activity => {\r\n            activity.attendees.forEach(attendee => {\r\n                if (attendee.username === username) {\r\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\r\n                    attendee.following = !attendee.following;\r\n                }\r\n            })\r\n        })\r\n    }\r\n}\r\n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class ProfileStore {\r\n    profile: Profile | null = null;\r\n    loadingProfile = false;\r\n    uploading = false;\r\n    loading = false;\r\n    loadingOnDelete = false;\r\n    followings: Profile[] = [];\r\n    loadingFollowings: boolean = false;\r\n    activeTab = 0;\r\n    userActivities: UserActivity[] = [];\r\n    loadingActivities = false;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.activeTab,\r\n            activeTab => {\r\n                if (activeTab === 3 || activeTab === 4) {\r\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\r\n                    this.loadFollowings(predicate);\r\n                } else {\r\n                    this.followings = [];\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setActiveTab = (activeTab: any) => {\r\n        this.activeTab = activeTab;\r\n    }\r\n\r\n    get isCurrentUser() {\r\n        if (store.userStore.user && this.profile) {\r\n            return store.userStore.user.username === this.profile.username;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    loadProfile = async (username: string) => {\r\n        this.loadingProfile = true;\r\n\r\n        try {\r\n            const profile = await agent.Profiles.get(username);\r\n            runInAction(() => {\r\n                this.profile = profile;\r\n                this.loadingProfile = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingProfile = false)\r\n        }\r\n    }\r\n\r\n    uploadPhoto = async (file: Blob) => {\r\n        this.uploading = true;\r\n        try {\r\n            const response = await agent.Profiles.uploadPhoto(file);\r\n            const photo = response.data;\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos?.push(photo);\r\n                    if (photo.isMain && store.userStore.user) {\r\n                        store.userStore.setImage(photo.url);\r\n                        this.profile.image = photo.url;\r\n                    }\r\n                }\r\n                this.uploading = false;\r\n            })\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.uploading = false)\r\n        }\r\n    }\r\n\r\n    setMainPhoto = async (photo: Photo) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.setMainPhoto(photo.id);\r\n            store.userStore.setImage(photo.url);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.photos) {\r\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\r\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\r\n                    this.profile.image = photo.url;\r\n                    this.loading = false;\r\n                }\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    deletePhoto = async (photo: Photo) => {\r\n        this.loadingOnDelete = true;\r\n        try {\r\n            await agent.Profiles.deletePhoto(photo.id);\r\n            runInAction(() => {\r\n                if (this.profile) {\r\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\r\n                    this.loadingOnDelete = false\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingOnDelete = false);\r\n        }\r\n    }\r\n\r\n    updateFollowing = async (username: string, following: boolean) => {\r\n        this.loading = true;\r\n        try {\r\n            await agent.Profiles.updateFollowing(username);\r\n            store.activityStore.updateAttendeeFollowing(username);\r\n            runInAction(() => {\r\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\r\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\r\n                    this.profile.following = !this.profile.following;\r\n                }\r\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\r\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\r\n                }\r\n                this.followings.forEach(profile => {\r\n                    if (profile.username === username) {\r\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\r\n                        profile.following = !profile.following;\r\n                    }\r\n                })\r\n                this.loading = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loading = false);\r\n        }\r\n    }\r\n\r\n    loadFollowings = async (predicate: string) => {\r\n        this.loadingFollowings = true;\r\n        try {\r\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\r\n            runInAction(() => {\r\n                this.followings = followings;\r\n                this.loadingFollowings = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => this.loadingFollowings = false);\r\n        }\r\n    }\r\n\r\n\r\n    loadUserActivities = async (username: string, predicate?: string) => {\r\n        this.loadingActivities = true;\r\n        try {\r\n            const activities = await agent.Profiles.listActivities(username, predicate!);\r\n            runInAction(() => {\r\n                this.userActivities = activities;\r\n                this.loadingActivities = false;\r\n            })\r\n        } catch (error) {\r\n            console.log(error);\r\n            runInAction(() => {\r\n                this.loadingActivities = false;\r\n            })\r\n        }\r\n    }\r\n}","import { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { history } from \"../..\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"../models/user\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class UserStore {\r\n    user: User | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    get isLoggedIn() {\r\n        return !!this.user;\r\n    }\r\n\r\n    login = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.login(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    logout = () => {\r\n        store.commonStore.setToken(null);\r\n        window.localStorage.removeItem('jwt');\r\n        this.user = null;\r\n        history.push('/');\r\n    }\r\n\r\n    getUser = async () => {\r\n        try {\r\n            const user = await agent.Account.current();\r\n            runInAction(() => this.user = user);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    register = async (creds: UserFormValues) => {\r\n        try {\r\n            const user = await agent.Account.register(creds);\r\n            store.commonStore.setToken(user.token);\r\n            runInAction(() => this.user = user);\r\n            history.push('/activities');\r\n            store.modalStore.closeModal();\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    setImage = (image:string) => {\r\n        if(this.user) this.user.image = image;\r\n    }\r\n}","import { useContext, createContext } from \"react\";\r\nimport ActivityStore from \"./activityStore\";\r\nimport CommentStore from \"./commentStore\";\r\nimport CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\nimport ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n    activityStore: ActivityStore;\r\n    commonStore : CommonStore;\r\n    userStore : UserStore;\r\n    modalStore : ModalStore;\r\n    profileStore : ProfileStore;\r\n    commentStore:CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n    activityStore: new ActivityStore(),\r\n    commonStore: new CommonStore(),\r\n    userStore : new UserStore(),\r\n    modalStore : new ModalStore(),\r\n    profileStore : new ProfileStore(),\r\n    commentStore : new CommentStore()\r\n}\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore(){\r\n    return useContext(StoreContext);\r\n}","import { makeAutoObservable, reaction } from \"mobx\";\r\nimport { ServerError } from \"../models/serverError\";\r\n\r\nexport default class CommonStore{\r\n    error: ServerError | null = null;\r\n    token: string |  null = window.localStorage.getItem(\"jwt\");\r\n    appLoaded = false;\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n\r\n        reaction(\r\n            () => this.token,\r\n            token => {\r\n                if(token){\r\n                    window.localStorage.setItem(\"jwt\", token);\r\n                }else{\r\n                    window.localStorage.removeItem(\"jwt\");\r\n                }\r\n            }\r\n        )\r\n    }\r\n\r\n    setServerError = (error:ServerError) => {\r\n        this.error = error;\r\n    }\r\n\r\n    setToken = (token:string | null) => {\r\n        this.token = token;\r\n    }\r\n\r\n    setAppLoaded = () => {\r\n        this.appLoaded = true;\r\n    }\r\n    \r\n}","import { makeAutoObservable } from \"mobx\"\r\n\r\n\r\ninterface Modal {\r\n    open: boolean;\r\n    body: JSX.Element | null;\r\n}\r\n\r\nexport default class ModalStore{\r\n    modal : Modal = {\r\n        open: false,\r\n        body: null\r\n    }\r\n\r\n    constructor(){\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    openModal = (content: JSX.Element) => {\r\n        this.modal.open = true;\r\n        this.modal.body = content;\r\n    }\r\n\r\n    closeModal = () => {\r\n        this.modal.open = false;\r\n        this.modal.body = null;\r\n    }\r\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { ChatComment } from \"../models/comment\";\r\nimport { store } from \"./store\";\r\n\r\nexport default class CommentStore {\r\n    comments: ChatComment[] = [];\r\n    hubConnection: HubConnection | null = null;\r\n\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    }\r\n\r\n    createHubConnection = (activityId: string) => {\r\n        if (store.activityStore.selectedActivity) {\r\n            this.hubConnection = new HubConnectionBuilder()\r\n                .withUrl( process.env.REACT_APP_CHAT_URL +\"?activityId=\" + activityId, {\r\n                    accessTokenFactory: () => store.userStore.user?.token!\r\n                })\r\n                .withAutomaticReconnect()\r\n                .configureLogging(LogLevel.Information)\r\n                .build();\r\n\r\n            this.hubConnection.start().catch(error => console.log(\"Error establishing connection: \" + error));\r\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\r\n                runInAction(() => {\r\n                    comments.forEach(comment => {\r\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\r\n                    })\r\n                    this.comments = comments\r\n                } );\r\n            })\r\n\r\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\r\n                runInAction(() => {\r\n                    comment.createdAt = new Date(comment.createdAt);\r\n                    this.comments.unshift(comment);\r\n                });\r\n            })\r\n        }\r\n    }\r\n    stopHubConnection = () => {\r\n        this.hubConnection?.stop().catch(error => console.log(\"Error: \" + error));\r\n    }\r\n\r\n    clearComments = () => {\r\n        this.comments = [];\r\n        this.stopHubConnection();\r\n    }\r\n\r\n    addComment = async (values : any) => {\r\n        values.activityId = store.activityStore.selectedActivity?.id;\r\n        try {\r\n            await this.hubConnection?.invoke(\"SendComment\", values);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom';\r\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react'\r\nimport { useStore } from '../stores/store';\r\n\r\n\r\nexport default observer(function NavBar() {\r\n    const { userStore: { user, logout } } = useStore();\r\n\r\n    return (\r\n        <Menu inverted fixed='top'>\r\n            <Container>\r\n                <Menu.Item as={NavLink} to='/' exact >\r\n                    <img src=\"/assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\r\n                    EventMedia\r\n                </Menu.Item>\r\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\r\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\r\n                <Menu.Item>\r\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\r\n                </Menu.Item>\r\n                <Menu.Item position=\"right\">\r\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced=\"right\" />\r\n                    <Dropdown pointing=\"top left\" text={user?.displayName}>\r\n                        <Dropdown.Menu>\r\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text=\"My profile\" icon=\"user\" />\r\n                            <Dropdown.Item onClick={logout} text=\"Logout\" icon=\"power\" />\r\n                        </Dropdown.Menu>\r\n                    </Dropdown>\r\n                </Menu.Item>\r\n            </Container>\r\n        </Menu>\r\n    )\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport Calendar from 'react-calendar';\r\nimport { Header, Menu } from 'semantic-ui-react';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nexport default observer(function ActivityFilters() {\r\n    const {activityStore: {predicate, setPredicate}} = useStore();\r\n    return (\r\n        <>\r\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\r\n                <Header icon='filter' attached color='teal' content='Filters' />\r\n                <Menu.Item \r\n                    content='All Activites' \r\n                    active={predicate.has('all')}\r\n                    onClick={() => setPredicate('all', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm going\" \r\n                    active={predicate.has('isGoing')}\r\n                    onClick={() => setPredicate('isGoing', 'true')}\r\n                />\r\n                <Menu.Item \r\n                    content=\"I'm hosting\" \r\n                    active={predicate.has('isHost')}\r\n                    onClick={() => setPredicate('isHost', 'true')}    \r\n                />\r\n            </Menu>\r\n            <Header />\r\n            <Calendar \r\n                onChange={(date:Date) => setPredicate('startDate', date as Date)}\r\n                value={predicate.get('startDate') || new Date()}\r\n            />\r\n        </>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent } from 'react';\r\nimport { Reveal, Button } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function FollowButton({ profile }: Props) {\r\n    const {profileStore, userStore} = useStore();\r\n    const {updateFollowing, loading} = profileStore;\r\n\r\n    if(userStore.user?.username === profile.username) return null;\r\n\r\n    function handleFollow(e: SyntheticEvent, username: string){\r\n        e.preventDefault();\r\n        profile.following ? updateFollowing(username, false) : updateFollowing(username,true);\r\n    }\r\n\r\n    return (\r\n        <Reveal animated=\"move\">\r\n            <Reveal.Content visible style={{ width: \"100%\" }}>\r\n                <Button \r\n                fluid \r\n                color=\"teal\" \r\n                content={profile.following ? 'Following' : 'Not Following'} />\r\n            </Reveal.Content>\r\n            <Reveal.Content hidden style={{ width: \"100%\" }}>\r\n                <Button \r\n                fluid \r\n                basic \r\n                color={profile.following ? \"red\" : \"green\"} \r\n                content={profile.following ? \"Unfollow\" : \"Follow\"}\r\n                loading={loading}\r\n                onClick={(e)=> handleFollow(e,profile.username)} \r\n                />\r\n            </Reveal.Content>\r\n        </Reveal>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Card, Icon, Image } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile\r\n}\r\n\r\nexport default observer(function ProfileCard({ profile }: Props) {\r\n    return ( \r\n        <Card as={Link} to={`/profiles/${profile.username}`}>\r\n            <Image src={profile.image || \"/assets/user.png\"} />\r\n            <Card.Content>\r\n                <Card.Header>\r\n                    {profile.displayName}\r\n                </Card.Header>\r\n                <Card.Description> Bio ovdje</Card.Description>\r\n            </Card.Content>\r\n            <Card.Content extra>\r\n                <Icon name=\"user\" />\r\n                {profile.followersCount} followers\r\n            </Card.Content>\r\n            <FollowButton profile={profile} />\r\n        </Card>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Image, List, Popup } from 'semantic-ui-react';\r\nimport { Profile } from '../../../app/models/profile';\r\nimport ProfileCard from '../../profiles/ProfileCard';\r\n\r\ninterface Props {\r\n    attendees: Profile[];\r\n}\r\n\r\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\r\n    const styles = {\r\n        borderColor: 'orange',\r\n        borderWidth: 3\r\n    }\r\n\r\n    return (\r\n        <List horizontal>\r\n            {attendees.map(attendee => (\r\n                <Popup hoverable key={attendee.username}\r\n                    trigger={\r\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\r\n                            <Image \r\n                            size='mini' \r\n                            circular \r\n                            src={attendee.image || '/assets/user.png'}\r\n                            bordered\r\n                            style={attendee.following ? styles : null}\r\n                            />\r\n                        </List.Item>\r\n                    }>\r\n                    <Popup.Content>\r\n                        <ProfileCard profile={attendee} />\r\n                    </Popup.Content>\r\n                </Popup>\r\n\r\n            ))}\r\n        </List>\r\n    )\r\n});","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Item, Label, Segment } from \"semantic-ui-react\";\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport ActivityListItemAttendee from \"./ActivityListItemAttendee\";\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default function ActivityListItem({ activity }: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                {activity.isCancelled &&\r\n                    <Label attached=\"top\" color=\"red\" content=\"Canceled\" style={{ textAlign: 'center' }} />\r\n                }\r\n                <Item.Group>\r\n                    <Item>\r\n                        <Item.Image style={{ margineBottom: 3 }} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\r\n                        <Item.Content>\r\n                            <Item.Header as={Link} to={`/activities/${activity.id}`} >\r\n                                {activity.title}\r\n                            </Item.Header>\r\n                            <Item.Description>Hosted By <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link>  </Item.Description>\r\n                            {activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"orange\">\r\n                                        You are hosting this activity!\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                            {activity.isGoing && !activity.isHost && (\r\n                                <Item.Description>\r\n                                    <Label basic color=\"green\">\r\n                                        You are going to this activity!\r\n                                    </Label>\r\n                                </Item.Description>\r\n                            )}\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <span>\r\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                    <Icon name='marker' /> {activity.venue}\r\n                </span>\r\n            </Segment>\r\n            <Segment secondary>\r\n                <ActivityListItemAttendee attendees={activity.attendees!} />\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>{activity.description}</span>\r\n                <Button as={Link} to={`/activities/${activity.id}`}\r\n                    color='teal' floated='right' content='View'>\r\n\r\n                </Button>\r\n            </Segment>\r\n        </Segment.Group>\r\n\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { Fragment } from \"react\";\r\nimport { Header } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityListItem from \"./ActivityListItem\";\r\n\r\nexport default observer(function ActivityList() {\r\n    const { activityStore } = useStore();\r\n    const { groupedActivites } = activityStore;\r\n\r\n    return (\r\n        <>\r\n            {groupedActivites.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Header sub color=\"teal\">\r\n                        {group}\r\n                    </Header>\r\n                    {activities.map(activity => (\r\n                        <ActivityListItem key={activity.id} activity={activity} />\r\n                    ))}\r\n                </Fragment>\r\n            ))}\r\n        </>\r\n\r\n    );\r\n})","import React, { Fragment } from 'react';\r\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\r\n\r\nexport default function ActivityListItemPlaceholder() {\r\n    return (\r\n        <Fragment>\r\n            <Placeholder fluid style={{ marginTop: 25 }}>\r\n                <Segment.Group>\r\n                    <Segment style={{ minHeight: 110 }}>\r\n                        <Placeholder>\r\n                            <Placeholder.Header image>\r\n                                <Placeholder.Line />\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Header>\r\n                            <Placeholder.Paragraph>\r\n                                <Placeholder.Line />\r\n                            </Placeholder.Paragraph>\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment>\r\n                        <Placeholder>\r\n                            <Placeholder.Line />\r\n                            <Placeholder.Line />\r\n                        </Placeholder>\r\n                    </Segment>\r\n                    <Segment secondary style={{ minHeight: 70 }} />\r\n                    <Segment clearing>\r\n                        <Button disabled color='blue' floated='right' content='View' />\r\n                    </Segment>\r\n                </Segment.Group>\r\n            </Placeholder>\r\n        </Fragment>\r\n    );\r\n};\r\n","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport InfiniteScroll from \"react-infinite-scroller\";\r\nimport { Grid, Loader } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { PagingParams } from \"../../../app/models/pagination\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityFilters from \"./ActivityFilters\";\r\nimport ActivityList from \"./ActivityList\";\r\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\r\n\r\nexport default observer(function ActivityDashboard() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { loadActivities, activityRegistry, setPagingParams, pagination } = activityStore;\r\n    const [loadingNext, setLoadingNext] = useState(false);\r\n\r\n    function handleGetNext() {\r\n        setLoadingNext(true);\r\n        setPagingParams(new PagingParams(pagination!.currentPage + 1))\r\n        loadActivities().then(() => setLoadingNext(false));\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (activityRegistry.size <= 1) loadActivities();\r\n    }, [activityRegistry.size, loadActivities])\r\n\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width='10'>\r\n                {activityStore.loadingInitial && !loadingNext ? (\r\n                    <>\r\n                        <ActivityListItemPlaceholder />\r\n                        <ActivityListItemPlaceholder />\r\n                    </>\r\n                ) : (\r\n                    <InfiniteScroll\r\n                        pageStart={0}\r\n                        loadMore={handleGetNext}\r\n                        hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\r\n                        initialLoad={false}\r\n                    >\r\n                        <ActivityList />\r\n                    </InfiniteScroll>\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width=\"6\">\r\n                <ActivityFilters />\r\n            </Grid.Column>\r\n            <Grid.Column width={10}>\r\n                <Loader active={loadingNext} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    type?: string;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextInput(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <input {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header, Label } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer(function LoginForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.login(values).catch(error =>\r\n                setErrors({ error: 'Invalid email or password' }))} >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as=\"h2\" content=\"Login to Reactivities!\" color=\"teal\" textAlign=\"center\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage name=\"error\" render={() => <Label style={{marginBottom:10}} basic color=\"red\" content={errors.error} />} />\r\n                    <Button loading={isSubmitting} positive content=\"Login\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import React from \"react\";\r\nimport { Message } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    errors: any;\r\n}\r\n\r\nexport default function ValidationErrors({ errors }: Props) {\r\n    return (\r\n        <Message error>\r\n            {errors && (\r\n                <Message.List>\r\n                    {errors.map((err: any, i: any) => (\r\n                        <Message.Item key={i}> {err} </Message.Item>\r\n                    ))}\r\n                </Message.List>\r\n            )}\r\n        </Message>\r\n    )\r\n}","import { ErrorMessage, Form, Formik } from \"formik\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Button, Header } from \"semantic-ui-react\";\r\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport * as Yup from 'yup';\r\nimport ValidationErrors from \"../errors/ValidationErrors\";\r\n\r\nexport default observer(function RegisterForm() {\r\n    const { userStore } = useStore();\r\n    return (\r\n        <Formik\r\n            initialValues={{ displayName: '', username: '', email: '', password: '', error: null }}\r\n            onSubmit={(values, { setErrors }) => userStore.register(values).catch(error =>\r\n                setErrors({ error }))}\r\n            validationSchema = {Yup.object({\r\n                displayName: Yup.string().required(),\r\n                username: Yup.string().required(),\r\n                email: Yup.string().required().email(),\r\n                password: Yup.string().required()\r\n            })}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors, isValid, dirty }) => (\r\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off' >\r\n                    <Header as=\"h2\" content=\"Sign up to Reactivities!\" color=\"teal\" textAlign=\"center\" />\r\n                    <MyTextInput name=\"displayName\" placeholder=\"Display Name\" />\r\n                    <MyTextInput name=\"username\" placeholder=\"Username\" />\r\n                    <MyTextInput name=\"email\" placeholder=\"Email\" />\r\n                    <MyTextInput name=\"password\" placeholder=\"Password\" type=\"password\" />\r\n                    <ErrorMessage name=\"error\" render={() => \r\n                        <ValidationErrors errors={errors.error} />\r\n                    } />\r\n                    <Button disabled={!isValid || !dirty || isSubmitting} loading={isSubmitting} positive content=\"Register\" type=\"submit\" fluid />\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    );\r\n});","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Container, Header, Segment, Image, Button } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport LoginForm from \"../users/LoginForm\";\r\nimport RegisterForm from \"../users/RegisterForm\";\r\n\r\nexport default observer(function HomePage() {\r\n    const { userStore, modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead'>\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                    Event Media\r\n                </Header>\r\n                {userStore.isLoggedIn ? (\r\n                    <>\r\n                        <Header as=\"h2\" inverted content=\"Welcome to Event Media\" />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                    <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                        Login!\r\n                    </Button>\r\n                    <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\r\n                        Register!\r\n                    </Button>\r\n                    </>\r\n                )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n});","import React from \"react\";\r\nimport { Dimmer, Loader } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    inverted?: boolean;\r\n    content?: string;\r\n\r\n}\r\n\r\nexport default function LoadingComponent({inverted=true, content = 'Loading...'}: Props) {\r\n    return(\r\n        <Dimmer active={true} inverted={inverted} >\r\n            <Loader content={content} />\r\n        </Dimmer>)\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    rows:number;\r\n    label?: string;\r\n}\r\n\r\nexport default function MyTextArea(props: Props) {\r\n    const [field, meta] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <textarea {...field} {...props} />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label, Select } from \"semantic-ui-react\";\r\n\r\ninterface Props {\r\n    placeholder: string;\r\n    name: string;\r\n    options: any;\r\n    label?: string;\r\n}\r\n\r\nexport default function MySelectInput(props: Props) {\r\n    const [field, meta, helpers] = useField(props.name);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <label>{props.label}</label>\r\n            <Select\r\n                clearable\r\n                options={props.options}\r\n                value={field.value || null}\r\n                onChange={(e, d) => helpers.setValue(d.value)}\r\n                onBlur={() => helpers.setTouched(true)}\r\n                placeholder={props.placeholder}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>) : null}\r\n        </Form.Field>\r\n    );\r\n}","export const categoryOptions =\r\n    [\r\n        { text: 'Drinks', value: 'drinks' },\r\n        { text: 'Culture', value: 'culture' },\r\n        { text: 'Film', value: 'film' },\r\n        { text: 'Food', value: 'food' },\r\n        { text: 'Music', value: 'music' },\r\n        { text: 'Travel', value: 'travel' }\r\n    ]","import { useField } from \"formik\";\r\nimport React from \"react\";\r\nimport { Form, Label } from \"semantic-ui-react\";\r\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\r\n\r\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\r\n    const [field, meta, helpers] = useField(props.name!);\r\n    return (\r\n        <Form.Field error={meta.touched && !!meta.error} >\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || null}\r\n                onChange={value => helpers.setValue(value)}\r\n            />\r\n            {meta.touched && meta.error ? (\r\n                <Label basic color=\"red\">\r\n                    {meta.error}\r\n                </Label>) : null}\r\n        </Form.Field>\r\n    );\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useHistory, useParams } from \"react-router\";\r\nimport { Button, Header, Segment } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\r\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\r\nimport MySelectInput from \"../../../app/common/form/MySelectInput\";\r\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\r\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\r\nimport { v4 as uuid } from 'uuid'\r\nimport {  ActivityFormValues } from \"../../../app/models/activity\";\r\n\r\n\r\nexport default observer(function ActivityForm() {\r\n\r\n    const history = useHistory();\r\n    const { activityStore } = useStore();\r\n    const { createActivity, updateActivity,\r\n         loadActivity, loadingInitial } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('Activity title is required'),\r\n        description: Yup.string().required('Activity description is required'),\r\n        category: Yup.string().required('Activity category is required'),\r\n        city: Yup.string().required('Activity city is required'),\r\n        venue: Yup.string().required('Activity venue is required'),\r\n        date: Yup.string().required('Date is required').nullable()\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\r\n    }, [id, loadActivity]);\r\n\r\n\r\n    function handleFormSubmit(activity: ActivityFormValues) {\r\n        if (!activity.id) {\r\n            let newActivity = {\r\n                ...activity,\r\n                id: uuid()\r\n            };\r\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`));\r\n        } else {\r\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\r\n        }\r\n    }\r\n\r\n    if (loadingInitial) return <LoadingComponent content=\"Loading activity...\" />\r\n\r\n    return (\r\n        <Segment clearing>\r\n            <Header content=\"Activity Details\" sub color='teal' />\r\n            <Formik\r\n                validationSchema={validationSchema}\r\n                enableReinitialize\r\n                initialValues={activity}\r\n                onSubmit={values => handleFormSubmit(values)}>\r\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\r\n                    <Form className=\"ui form\" onSubmit={handleSubmit} autoComplete='off'>\r\n                        <MyTextInput name=\"title\" placeholder=\"Title\" />\r\n                        <MyTextArea placeholder=\"Description\" rows={3} name=\"description\" />\r\n                        <MySelectInput options={categoryOptions} placeholder=\"Category\" name=\"category\" />\r\n                        <MyDateInput\r\n                            placeholderText=\"Date\"\r\n                            name=\"date\"\r\n                            showTimeSelect\r\n                            timeCaption='time'\r\n                            dateFormat='MMM d, yyyy h:mm aa'\r\n                        />\r\n                        <Header content=\"Location Details\" sub color='teal' />\r\n                        <MyTextInput placeholder=\"City\" name=\"city\" />\r\n                        <MyTextInput placeholder=\"Venue\" name=\"venue\" />\r\n                        <Button\r\n                            disabled={isSubmitting || !dirty || !isValid}\r\n                            loading={isSubmitting} floated=\"right\"\r\n                            positive type=\"submit\" content=\"Submit\" />\r\n                        <Button as={Link} to=\"/activities\" floated=\"right\" type=\"button\" content=\"Cancel\" />\r\n                    </Form>\r\n                )}\r\n            </Formik>\r\n\r\n        </Segment>\r\n    );\r\n})","import { Formik, Form, Field, FieldProps } from 'formik';\r\nimport { observer } from 'mobx-react-lite'\r\nimport React, { useEffect } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\r\nimport { useStore } from '../../../app/stores/store';\r\nimport * as Yup from 'yup';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\ninterface Props {\r\n    activityId: string;\r\n}\r\n\r\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\r\n    const { commentStore } = useStore();\r\n\r\n    useEffect(() => {\r\n        if (activityId) {\r\n            commentStore.createHubConnection(activityId);\r\n        }\r\n        return () => {\r\n            commentStore.clearComments();\r\n        }\r\n    }, [commentStore, activityId])\r\n\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                attached='top'\r\n                inverted\r\n                color='teal'\r\n                style={{ border: 'none' }}\r\n            >\r\n                <Header>Chat about this event</Header>\r\n            </Segment>\r\n            <Segment attached clearing>\r\n                <Formik\r\n                    onSubmit={(values, { resetForm }) =>\r\n                        commentStore.addComment(values).then(() => resetForm())}\r\n                    initialValues={{ body: '' }}\r\n                    validationSchema={Yup.object({\r\n                        body: Yup.string().required()\r\n                    })}\r\n                >\r\n                    {({ isSubmitting, isValid, handleSubmit }) => (\r\n                        <Form className='ui form' >\r\n                            <Field name=\"body\" >\r\n                                {(props: FieldProps) => (\r\n                                    <div style={{ position: 'relative' }} >\r\n                                        <Loader active={isSubmitting} />\r\n                                        <textarea\r\n                                            placeholder='Enter your comment'\r\n                                            rows={2}\r\n                                            {...props.field}\r\n                                            onKeyPress={e => {\r\n                                                if (e.key === 'Enter' && e.shiftKey) {\r\n                                                    return;\r\n                                                }\r\n                                                if (e.key === 'Enter' && !e.shiftKey) {\r\n                                                    e.preventDefault();\r\n                                                    isValid && handleSubmit();\r\n                                                }\r\n                                            }}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Field>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <Comment.Group>\r\n                    {commentStore.comments.map(comment => (\r\n                        <Comment key={comment.id}>\r\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\r\n                            <Comment.Content>\r\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\r\n                                    {comment.displayName}</Comment.Author>\r\n                                <Comment.Metadata>\r\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\r\n                                </Comment.Metadata>\r\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }} >{comment.body} </Comment.Text>\r\n                            </Comment.Content>\r\n                        </Comment>\r\n                    ))}\r\n\r\n                </Comment.Group>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\r\nimport { Activity } from \"../../../app/models/activity\";\r\nimport { format } from 'date-fns';\r\nimport { useStore } from '../../../app/stores/store';\r\n\r\nconst activityImageStyle = {\r\n    filter: 'brightness(30%)'\r\n};\r\n\r\nconst activityImageTextStyle = {\r\n    position: 'absolute',\r\n    bottom: '5%',\r\n    left: '5%',\r\n    width: '100%',\r\n    height: 'auto',\r\n    color: 'white'\r\n};\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\r\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\r\n    return (\r\n        <Segment.Group>\r\n            <Segment basic attached='top' style={{ padding: '0' }}>\r\n                {activity.isCancelled &&\r\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }} ribbon color=\"red\" content=\"Canceled\" />\r\n                }\r\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\r\n                <Segment style={activityImageTextStyle} basic>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Content>\r\n                                <Header\r\n                                    size='huge'\r\n                                    content={activity.title}\r\n                                    style={{ color: 'white' }}\r\n                                />\r\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\r\n                                <p>\r\n                                    Hosted by <strong> <Link to={`/profiles/${activity.host?.username}`} >{activity.host?.displayName} </Link> </strong>\r\n                                </p>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Segment>\r\n            </Segment>\r\n            <Segment clearing attached='bottom'>\r\n                {activity.isHost ? (\r\n                    <>\r\n                        <Button color={activity.isCancelled ? 'green' : 'red'} floted=\"left\"\r\n                            basic content={activity.isCancelled ? \"Re-activate activity\" : \"Cancel activity\"}\r\n                            onClick={cancelActivityToggle}\r\n                            loading={loading}\r\n                        />\r\n                        <Button as={Link}\r\n                            disabled={activity.isCancelled}\r\n                            to={`/manage/${activity.id}`}\r\n                            color='orange' floated='right'>\r\n                            Manage Event\r\n                        </Button>\r\n                    </>\r\n                ) : activity.isGoing ? (\r\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\r\n                ) : (\r\n                    <Button disabled={activity.isCancelled} loading={loading} onClick={updateAttendance} color='teal'>Join Activity</Button>\r\n                )}\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import { observer } from 'mobx-react-lite';\r\nimport React from 'react'\r\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\r\nimport {Activity} from \"../../../app/models/activity\";\r\nimport {format} from 'date-fns';\r\n\r\ninterface Props {\r\n    activity: Activity\r\n}\r\n\r\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\r\n    return (\r\n        <Segment.Group>\r\n            <Segment attached='top'>\r\n                <Grid>\r\n                    <Grid.Column width={1}>\r\n                        <Icon size='large' color='teal' name='info'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n                        <p>{activity.description}</p>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='calendar' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={15}>\r\n            <span>\r\n              {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n            </span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n            <Segment attached>\r\n                <Grid verticalAlign='middle'>\r\n                    <Grid.Column width={1}>\r\n                        <Icon name='marker' size='large' color='teal'/>\r\n                    </Grid.Column>\r\n                    <Grid.Column width={11}>\r\n                        <span>{activity.venue}, {activity.city}</span>\r\n                    </Grid.Column>\r\n                </Grid>\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n})\r\n","import React from 'react'\r\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\r\nimport { Link } from 'react-router-dom'\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Activity } from '../../../app/models/activity';\r\n\r\ninterface Props {\r\n    activity: Activity;\r\n}\r\n\r\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\r\n    if (!attendees) return null;\r\n    return (\r\n        <>\r\n            <Segment\r\n                textAlign='center'\r\n                style={{ border: 'none' }}\r\n                attached='top'\r\n                secondary\r\n                inverted\r\n                color='teal'\r\n            >\r\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\r\n            </Segment>\r\n            <Segment attached>\r\n                <List relaxed divided>\r\n                    {attendees.map(attendee => (\r\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\r\n                            {attendee.username === host?.username &&\r\n                               <Label\r\n                                    style={{ position: 'absolute' }}\r\n                                    color='orange'\r\n                                    ribbon='right'\r\n                                >\r\n                                    Host\r\n                                </Label>}\r\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign='middle'>\r\n                                <Item.Header as='h3'>\r\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\r\n                                </Item.Header>\r\n                                {attendee.following &&\r\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\r\n                            </Item.Content>\r\n                        </Item>\r\n                    ))}\r\n                </List>\r\n            </Segment>\r\n        </>\r\n\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../../app/stores/store\";\r\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\r\nimport ActivityDetailedHeader from \"./ActivityDetailedHeader\";\r\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\r\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\r\n\r\n\r\nexport default observer(function ActivityDetails() {\r\n\r\n    const { activityStore } = useStore();\r\n    const { selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity } = activityStore;\r\n    const { id } = useParams<{ id: string }>();\r\n\r\n    useEffect(() => {\r\n        if (id) loadActivity(id);\r\n        return () => clearSelectedActivity();\r\n    }, [id, loadActivity, clearSelectedActivity]);\r\n\r\n    if (loadingInitial || !activity) return <LoadingComponent />;\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={10}>\r\n                <ActivityDetailedHeader activity={activity} />\r\n                <ActivityDetailedInfo activity={activity} />\r\n                <ActivityDetailedChat activityId={activity.id} />\r\n            </Grid.Column>\r\n            <Grid.Column width={6}>\r\n                <ActivityDetailedSidebar activity={activity} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    );\r\n})","import React, { useState } from 'react';\r\nimport {Button, Header, Segment} from \"semantic-ui-react\";\r\nimport axios from 'axios';\r\nimport ValidationErrors from './ValidationErrors';\r\n\r\nexport default function TestErrors() {\r\n    const baseUrl = process.env.REACT_APP_API_URL;\r\n    const [errors, setErrors] = useState(null);\r\n\r\n    function handleNotFound() {\r\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadRequest() {\r\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleServerError() {\r\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleUnauthorised() {\r\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleBadGuid() {\r\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\r\n    }\r\n\r\n    function handleValidationError() {\r\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header as='h1' content='Test Error component' />\r\n            <Segment>\r\n                <Button.Group widths='7'>\r\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\r\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\r\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\r\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\r\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\r\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\r\n                </Button.Group>\r\n            </Segment>\r\n            {errors && \r\n                <ValidationErrors errors={errors} />\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Header, Icon, Segment } from \"semantic-ui-react\";\r\n\r\nexport default function NotFound() {\r\n    return (\r\n        <Segment placeholder>\r\n            <Header icon>\r\n                <Icon name=\"search\" />\r\n                Not found!\r\n            </Header>\r\n            <Segment.Inline >\r\n                <Button as={Link} to=\"/activities\" primary>\r\n                    Return to activity page</Button>\r\n            </Segment.Inline>\r\n        </Segment>\r\n    )\r\n}","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Container, Header, Segment } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../app/stores/store\";\r\n\r\nexport default observer( function ServerError(){\r\n    const {commonStore} = useStore();\r\n\r\n    return(\r\n        <Container>\r\n            <Header as='h1' content='Server error' />\r\n            <Header sub as='h5' color=\"red\" content={commonStore.error?.message} />\r\n            {commonStore.error?.details &&\r\n                <Segment>\r\n                    <Header as=\"h4\" content=\"Stack trace\" color=\"teal\" />\r\n                    <code style={{marginTop:\"10px\"}}> {commonStore.error.details} </code>\r\n                </Segment>\r\n            }\r\n        </Container>\r\n    )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { Modal } from \"semantic-ui-react\";\r\nimport { useStore } from \"../../stores/store\";\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size=\"mini\" >\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n\r\n    )\r\n});","import React, { SyntheticEvent, useEffect } from 'react';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\r\nimport { Link } from 'react-router-dom';\r\nimport { UserActivity } from '../../app/models/profile';\r\nimport { format } from 'date-fns';\r\nimport { useStore } from \"../../app/stores/store\";\r\nconst panes = [\r\n    { menuItem: 'Future Events', pane: { key: 'future' } },\r\n    { menuItem: 'Past Events', pane: { key: 'past' } },\r\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\r\n];\r\nexport default observer(function ProfileActivities() {\r\n    const { profileStore } = useStore();\r\n    const {\r\n        loadUserActivities,\r\n        profile,\r\n        loadingActivities,\r\n        userActivities\r\n    } = profileStore;\r\n    useEffect(() => {\r\n        loadUserActivities(profile!.username);\r\n    }, [loadUserActivities, profile]);\r\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\r\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\r\n    };\r\n    return (\r\n        <Tab.Pane loading={loadingActivities}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='calendar'\r\n                        content={'Activities'} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Tab\r\n                        panes={panes}\r\n                        menu={{ secondary: true, pointing: true }}\r\n                        onTabChange={(e, data) => handleTabChange(e, data)}\r\n                    />\r\n                    <br />\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {userActivities.map((activity: UserActivity) => (\r\n                            <Card\r\n                                as={Link}\r\n                                to={`/activities/${activity.id}`}\r\n                                key={activity.id}\r\n                            >\r\n                                <Image\r\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\r\n                                    style={{\r\n                                        minHeight: 100, objectFit:\r\n                                            'cover'\r\n                                    }}\r\n                                />\r\n                                <Card.Content>\r\n                                    <Card.Header\r\n                                        textAlign='center'>{activity.title}</Card.Header>\r\n                                    <Card.Meta textAlign='center'>\r\n                                        <div>{format(new Date(activity.date),'do LLL')}</div>\r\n                                        <div>{format(new Date(activity.date),'h:mm a')}</div>\r\n                                    </Card.Meta>\r\n                                </Card.Content>\r\n                            </Card>\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileCard from './ProfileCard';\r\n\r\nexport default observer(function ProfileFollowings(){\r\n    const {profileStore} = useStore();\r\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\r\n\r\n    return (\r\n        <Tab.Pane loading={loadingFollowings}>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated='left' icon='user' \r\n                    content={activeTab ===3 ? `People following ${profile?.displayName}`: `People ${profile?.displayName} is following`} />\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    <Card.Group itemsPerRow={4}>\r\n                        {followings.map(profile => (\r\n                            <ProfileCard key={profile.username} profile={profile} />\r\n                        ))}\r\n                    </Card.Group>\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Tab.Pane>\r\n    );\r\n});","import React, { useCallback } from 'react';\r\nimport { useDropzone } from 'react-dropzone';\r\nimport { Header, Icon } from 'semantic-ui-react';\r\n\r\ninterface Props {\r\n    setFiles: (files: any) => void\r\n}\r\n\r\nexport default function PhotoWidgeteDropzone({ setFiles }: Props) {\r\n    const dzStyles = {\r\n        border: 'dashed 3px #eee',\r\n        borderColor: '#eee',\r\n        borderRadius: '5px',\r\n        paddingTop: '30px',\r\n        textAlign: 'center' as 'center',\r\n        height: 200\r\n    }\r\n\r\n    const dzActive = {\r\n        borderColor: 'green'\r\n    }\r\n\r\n    const onDrop = useCallback(acceptedFiles => {\r\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\r\n            preview: URL.createObjectURL(file)\r\n        })))\r\n    }, [setFiles])\r\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\r\n\r\n    return (\r\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles}>\r\n            <input {...getInputProps()} />\r\n            <Icon name='upload' size=\"huge\" />\r\n            <Header content=\"Drop image here\" />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { Cropper } from 'react-cropper';\r\nimport 'cropperjs/dist/cropper.css';\r\n\r\ninterface Props {\r\n    imagePreview : string;\r\n    setCropper : (cropper: Cropper) => void;\r\n}\r\n\r\nexport default function PhotoWidgeteCroper({imagePreview, setCropper}:Props){\r\n    return(\r\n        <Cropper\r\n            src={imagePreview}\r\n            style={{height:200, width:'100%'}}\r\n            initialAspectRatio={1}\r\n            aspectRatio={1}\r\n            preview='.img-preview'\r\n            guides={false}\r\n            viewMode={1}\r\n            autoCropArea={1}\r\n            background={false}\r\n            onInitialized={cropper => setCropper(cropper)}\r\n        />\r\n    )\r\n}","import React, { useEffect, useState } from 'react';\r\nimport { Button, Grid, Header } from 'semantic-ui-react';\r\nimport PhotoWidgeteDropzone from './PhotoWidgeteDropzone';\r\nimport { Cropper } from 'react-cropper';\r\nimport PhotoWidgeteCroper from './PhotoWidgeteCroper';\r\n\r\ninterface Props {\r\n    loading: boolean;\r\n    uploadPhoto : (file: Blob) => void;\r\n}\r\n\r\nexport default function PhotoUploadWidget({loading, uploadPhoto} : Props) {\r\n    const [files, setFiles] = useState<any>([]);\r\n    const [cropper, setCropper] = useState<Cropper>();\r\n\r\n    function onCrop() {\r\n        if (cropper) {\r\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        return () => {\r\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\r\n        }\r\n    }, [files])\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 1 - Add Photo ' />\r\n                <PhotoWidgeteDropzone setFiles={setFiles} />\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 2 - Resize Image ' />\r\n                {files && files.length > 0 && (\r\n                    <PhotoWidgeteCroper setCropper={setCropper} imagePreview={files[0].preview} />\r\n                )}\r\n            </Grid.Column>\r\n            <Grid.Column width={1} />\r\n            <Grid.Column width={4}>\r\n                <Header color=\"teal\" content='Step 1 - Preview and upload ' />\r\n                {files && files.length > 0 &&\r\n                    <>\r\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\r\n                        <Button.Group widths={2}>\r\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\r\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\r\n                        </Button.Group>\r\n                    </>}\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n}","import { observer } from 'mobx-react-lite';\r\nimport React, { SyntheticEvent, useState } from 'react';\r\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react';\r\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\r\nimport { Photo, Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfilePhotos({ profile }: Props) {\r\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\r\n         loading, setMainPhoto, loadingOnDelete, deletePhoto } } = useStore();\r\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\r\n    const [target, setTarget] = useState('');\r\n\r\n    function handlePhotoUpload(file: Blob) {\r\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\r\n    }\r\n\r\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\r\n        setTarget(e.currentTarget.name);\r\n        setMainPhoto(photo);\r\n    }\r\n\r\n    function handleDeletePhoto(photo:Photo, e: SyntheticEvent<HTMLButtonElement>){\r\n        setTarget(e.currentTarget.name);\r\n        deletePhoto(photo);\r\n    }\r\n\r\n    return (\r\n        <Tab.Pane>\r\n            <Grid>\r\n                <Grid.Column width={16}>\r\n                    <Header floated=\"left\" icon=\"image\" content=\"Photos\" />\r\n                    {isCurrentUser && (\r\n                        <Button floated=\"right\" basic\r\n                            content={addPhotoMode ? \"Cancel\" : \"Add Photo\"}\r\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\r\n                        />\r\n                    )}\r\n                </Grid.Column>\r\n                <Grid.Column width={16}>\r\n                    {addPhotoMode ? (\r\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\r\n                    ) : (\r\n                        <Card.Group>\r\n                            {profile.photos?.map(photo => (\r\n                                <Card key={photo.id}>\r\n                                    <Image src={photo.url} />\r\n                                    {isCurrentUser && (\r\n                                        <Button.Group fluid widths={2}>\r\n                                            <Button\r\n                                                basin color=\"green\"\r\n                                                content=\"Main\"\r\n                                                name={photo.id}\r\n                                                disabled={photo.isMain}\r\n                                                loading={target === photo.id && loading}\r\n                                                onClick={e => handleSetMainPhoto(photo,e)}\r\n                                            />\r\n                                            <Button \r\n                                            basic color=\"red\" \r\n                                            icon=\"trash\"\r\n                                            name={photo.id}\r\n                                            disabled={photo.isMain}\r\n                                            loading={target === photo.id && loadingOnDelete}\r\n                                            onClick={e => handleDeletePhoto(photo,e)}\r\n                                            />\r\n                                        </Button.Group>\r\n                                    )}\r\n                                </Card>\r\n                            ))}\r\n                        </Card.Group>\r\n                    )}\r\n                </Grid.Column>\r\n            </Grid>\r\n\r\n        </Tab.Pane>\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Tab } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport { useStore } from '../../app/stores/store';\r\nimport ProfileActivities from './ProfileActivities';\r\nimport ProfileFollowings from './ProfileFollowings';\r\nimport ProfilePhotos from './ProfilePhotos';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer(function ProfileContent({ profile }: Props) {\r\n    const {profileStore} = useStore();\r\n    const panes = [\r\n        { menuItem: \"About\", render: () => <Tab.Pane>About Content</Tab.Pane> },\r\n        { menuItem: \"Photos\", render: () => <ProfilePhotos profile={profile} /> },\r\n        { menuItem: \"Events\", render: () => <ProfileActivities /> },\r\n        { menuItem: \"Followers\", render: () => <ProfileFollowings /> },\r\n        { menuItem: \"Following\", render: () => <ProfileFollowings /> }\r\n    ];\r\n\r\n    return (\r\n        <Tab\r\n            menu={{ fluid: true, vertical: true }}\r\n            menuPosition=\"right\"\r\n            panes={panes}\r\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\r\n        />\r\n    )\r\n})","import { observer } from 'mobx-react-lite';\r\nimport React from 'react';\r\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\r\nimport { Profile } from '../../app/models/profile';\r\nimport FollowButton from './FollowButton';\r\n\r\ninterface Props {\r\n    profile: Profile;\r\n}\r\n\r\nexport default observer( function ProfileHeader({profile}: Props){\r\n    return (\r\n        <Segment>\r\n            <Grid>\r\n                <Grid.Column width={12}>\r\n                    <Item.Group>\r\n                        <Item>\r\n                            <Item.Image avatar size=\"small\" src={profile.image || '/assets/user.png'} />\r\n                            <Item.Content verticalAlign=\"middle\" >\r\n                                <Header as=\"h1\" content={profile.displayName}/>\r\n                            </Item.Content>\r\n                        </Item>\r\n                    </Item.Group>\r\n                </Grid.Column>\r\n                <Grid.Column width={4}>\r\n                    <Statistic.Group widths={2} >\r\n                        <Statistic label=\"Followers\" value={profile.followersCount} />\r\n                        <Statistic label=\"Following\" value={profile.followingCount} />\r\n                    </Statistic.Group>\r\n                    <Divider />\r\n                    <FollowButton profile={profile} />\r\n                </Grid.Column>\r\n            </Grid>\r\n        </Segment>\r\n        )\r\n})","import { observer } from \"mobx-react-lite\";\r\nimport React, { useEffect } from \"react\";\r\nimport { useParams } from \"react-router\";\r\nimport { Grid } from \"semantic-ui-react\";\r\nimport LoadingComponent from \"../../app/layout/LoadingComponent\";\r\nimport { useStore } from \"../../app/stores/store\";\r\nimport ProfileContent from \"./ProfileContent\";\r\nimport ProfileHeader from \"./ProfileHeader\";\r\n\r\nexport default observer(function ProfilePage() {\r\n    const { username } = useParams<{ username: string }>();\r\n    const { profileStore } = useStore();\r\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\r\n\r\n    useEffect(() => {\r\n        loadProfile(username);\r\n        return () => {\r\n            setActiveTab(0);\r\n        }\r\n    }, [loadProfile, username])\r\n\r\n    if (loadingProfile) return <LoadingComponent content=\"Loading profile...\" />\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid.Column width={16}>\r\n                {profile &&\r\n                    <ProfileHeader profile={profile} />}\r\n                <ProfileContent profile={profile!} />\r\n            </Grid.Column>\r\n        </Grid>\r\n    )\r\n})","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router\";\r\nimport { useStore } from \"../stores/store\";\r\n\r\ninterface Props extends RouteProps{\r\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\r\n}\r\n\r\nexport default function PrivateRoute({component: Component, ...rest}:Props){\r\n    const {userStore: {isLoggedIn}} = useStore();\r\n\r\n    return (\r\n        <Route \r\n            {...rest}\r\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />}\r\n        />\r\n    )\r\n}","import React, { Fragment, useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './navBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport HomePage from '../../features/home/homePage';\nimport { Route, Switch, useLocation } from 'react-router';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n\n  const location = useLocation();\n  const { commonStore, userStore } = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if(!commonStore.appLoaded) return <LoadingComponent content=\"Loading app...\" />\n\n  return (\n    <Fragment >\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route\n        path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n\n    </Fragment>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\r\nimport { useLocation } from \"react-router\";\r\n\r\nexport default function ScrollToTop(){\r\n    const {pathname} = useLocation();\r\n\r\n    useEffect(() => {\r\n        window.scrollTo(0,0);\r\n    }, [pathname]);\r\n\r\n    return null;\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport {  Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrolltoTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}